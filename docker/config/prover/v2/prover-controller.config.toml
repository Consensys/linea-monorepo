# The version. We used it to generate the filename.
version = "2.0.0"

# Log level of the controller (does not leak to the prover job)
#
#   0 = panic
#   1 = fatal
#   2 = error
#   3 = warn
#   4 = info
#   5 = debug
#   6 = trace
#
#     Default to 4
#
log_level = 4

# The directory where we write the logs (stdout/stderr)
dir_logs = "/tmp/logs"

# The maximal return size of ls that we take into account
listing_limit = 100

# The delays at which we retry when we find no files in the queue. If this
# is set to [0, 1, 2, 3, 4, 5]. It will retry after 0 sec the first time it
# cannot find a file in the queue, 1 sec the second time and so on. Once it
# reaches the final value it keeps it as a final retry delay. Here we choose
# a value that works for local deployment because we would have only a single
# prover. But with many provers and a large queue, this can potentially
# overwhelm the EFS.
retry_delays = [0, 1]

# Suffix to add to signify that a file is in progress
inprogress_suffix = "inprogress"

# Suffix to add in case of error. If set to `code`, it will return `code_77` in
# case the job exited with a code 77. The suffix is applied both when the job
# is dropped or when it is defered to the large prover.
fail_suffix = "code"

# Suffix to add to successful job when they are done
success_suffix = "success"

[prometheus]
port = 9090

[execution]

  # Path to the executable to run for the command
  bin = "/opt/linea/prover/execprover"

  # The go template of the command to run. The template should have a go
  # template command structure. The template may use the fields:
  # 		- .Bin (or .BinLarge)
  # 		- .InFile
  # 		- .OutFile
  # 		- .ConfFile (or .ConfFileLarge)
  command = "{{.Bin}} --in {{.InFile}} --out {{.OutFile}} --config {{.ConfFile}} --traces /opt/linea/prover/config/executor/traces-limits-M.toml"

  # The config file to use for the command
  conf_file = "/opt/linea/prover/config/executor/execution.config.toml"

  # The directory where we read the files to handle
  dir_from = "/data/prover/v2/execution/requests"

  # The directory where we write the generated file
  dir_to = "/data/prover/v2/execution/responses"

  # The directory where we move the files when they have been handled.
  dir_done = "/data/prover/v2/execution/requests-done"

[compression]

  # Path to the executable to run for the command
  bin = "/opt/linea/prover/decomprover"

  # The go template of the command to run. The template should have a go
  # template command structure. The template may use the fields:
  # 		- .Bin (or .BinLarge)
  # 		- .InFile
  # 		- .OutFile
  # 		- .ConfFile (or .ConfFileLarge)
  command = "{{.Bin}} --in {{.InFile}} --out {{.OutFile}} --config {{.ConfFile}}"

  # the configuration file to use for the command
  conf_file = "/opt/linea/prover/config/executor/decompression.config.toml"

  # The directory where we read the files to handle
  dir_from = "/data/prover/v2/compression/requests"

  # The directory where we write the generated file
  dir_to = "/data/prover/v2/compression/responses"

  # The directory where we move the files when they have been handled.
  dir_done = "/data/prover/v2/compression/requests-done"

[aggregation]

  # Path to the executable to run for the command
  bin = "/opt/linea/prover/aggregprover"

  # The go template of the command to run. The template should have a go
  # template command structure. The template may use the fields:
  # 		- .Bin (or .BinLarge)
  # 		- .InFile
  # 		- .OutFile
  # 		- .ConfFile (or .ConfFileLarge)
  command = "{{.Bin}} --in {{.InFile}} --out {{.OutFile}} --config {{.ConfFile}}"

  # the configuration file to use for the command
  conf_file = "/opt/linea/prover/config/executor/aggregation.config.toml"

  # The directory where we read the files to handle
  dir_from = "/data/prover/v2/aggregation/requests"

  # The directory where we write the generated file
  dir_to = "/data/prover/v2/aggregation/responses"

  # The directory where we move the files when they have been handled.
  dir_done = "/data/prover/v2/aggregation/requests-done"
