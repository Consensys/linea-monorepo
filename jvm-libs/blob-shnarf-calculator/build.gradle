plugins {
  id 'net.consensys.zkevm.kotlin-common-minimal-conventions'
  id 'net.consensys.zkevm.linea-native-libs-helper'
  alias(libs.plugins.jreleaser)
}

description = 'Java JNA wrapper for Linea Blob Shnarf Calculator implemented in GO Lang'
apply from: rootProject.file("gradle/publishing.gradle")

dependencies {
  api "net.java.dev.jna:jna:${libs.versions.jna.get()}"
  testImplementation project(":jvm-libs:kotlin-extensions")
}

jar {
  dependsOn configurations.runtimeClasspath
}


test {
  // we cannot have more 1 compressor per JVM, hence we disable parallel execution
  // because multiple threads would cause issues with the native library
  systemProperties["junit.jupiter.execution.parallel.enabled"] = false
  maxParallelForks = 1
}

def libsZipDownloadOutputDir = project.parent.layout.buildDirectory.asFile.get().absolutePath

task downloadNativeLibs {
  doLast {
    fetchLibFromZip("https://github.com/Consensys/linea-monorepo/releases/download/blob-libs-v0.1.0/linea-blob-libs-v0.1.0.zip", "shnarf_calculator", libsZipDownloadOutputDir)
    fetchLibFromZip("https://github.com/Consensys/linea-monorepo/releases/download/blob-libs-v1.0.1/linea-blob-libs-v1.0.1.zip", "shnarf_calculator", libsZipDownloadOutputDir)
  }
}

compileKotlin {
  dependsOn tasks.downloadNativeLibs
}


tasks.register("depsize") {
  description = 'Prints dependencies for "default" configuration'
  doLast() {
    listConfigurationDependencies(configurations.compileClasspath)
  }
}

tasks.register("depsize-all-configurations") {
  description = 'Prints dependencies for all available configurations'
  doLast() {
    configurations
      .findAll { it.isCanBeResolved() }
      .each { listConfigurationDependencies(it) }
  }
}

def listConfigurationDependencies(Configuration configuration) {
  def formatStr = "%,10.2f"

  def size = configuration.collect { it.length() / (1024 * 1024) }.sum()

  def out = new StringBuffer()
  out << "\nConfiguration name: \"${configuration.name}\"\n"
  if (size) {
    out << 'Total dependencies size:'.padRight(65)
    out << "${String.format(formatStr, size)} Mb\n\n"

    configuration.sort { -it.length() }
      .each {
        out << "${it.name}".padRight(65)
        out << "${String.format(formatStr, (it.length() / 1024))} kb\n"
      }
  } else {
    out << 'No dependencies found';
  }
  println(out)
}
