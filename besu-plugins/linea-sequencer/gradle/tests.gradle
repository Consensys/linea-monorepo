/*
 * Copyright ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

apply plugin: 'jacoco'
jacoco {
  toolVersion = '0.8.8'
}

/*
  * Pass some system properties provided on the gradle command line to test executions for
  * convenience.
  *
  * The properties passed are:
  * - 'test.ethereum.include': allows to run a single Ethereum reference tests. For instance,
  *   running a single general state test can be done with:
  *    ./gradlew :ethereum:tech.pegasys.ethsigner.ethereum.vm:test -Dtest.single=GeneralStateTest -Dtest.ethereum.include=callcodecallcallcode_101-Frontier
  *   The meaning being that will be run only the tests for which the value passed as "include"
  *   (which can be a java pattern) matches parts of the test name. Knowing that tests names for
  *   reference tests are of the form:
  *     <name>(-<milestone>([<variant>])?)?
  *   where <name> is the test name as defined in the json file (usually the name of the json file
  *   as well), <milestone> is the Ethereum milestone tested (not all test use it) and <variant>
  *   is only use in some general state tests where for the same json file and same milestone,
  *   multiple variant of that test are run. The variant is a simple number.
  * - 'root.log.level' and 'evm.log.level': allow to control the log level used during the tests.
  */
test {
  jvmArgs = [
    '-Xmx4g',
    '-XX:-UseGCOverheadLimit',
    // Mockito and jackson-databind do some strange reflection during tests.
    // This suppresses an illegal access warning.
    '--add-opens',
    'java.base/java.util=ALL-UNNAMED',
    '--add-opens',
    'java.base/java.util.concurrent=ALL-UNNAMED'
  ]
  Set toImport = [
    'root.log.level',
    'evm.log.level'
  ]
  for (String name : toImport) {
    if (System.getProperty(name) != null) {
      systemProperty name, System.getProperty(name)
    }
  }

  useJUnitPlatform()
}

tasks.test.dependsOn(buildZkevmBin)

tasks.register('unitTests', Test) {
  useJUnitPlatform {
    excludeTags("AcceptanceTest")
  }
}

tasks.register('acceptanceTest', Test) {
  dependsOn rootProject.copyPluginJar
  inputs.property "integration.date", LocalTime.now() // so it runs at every invocation
  include '**'

  useJUnitPlatform {}

  doFirst {
    systemProperty "besu.plugins.dir", rootProject.ext.pluginDir
  }
}

