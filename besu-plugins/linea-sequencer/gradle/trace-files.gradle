/*
 * Copyright Consensys Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

// Special case: ALU modules
['add', 'ext', 'mod', 'mul'].each { moduleName ->
    tasks.register(moduleName, TraceFilesTask) {
        group "Trace files generation"
        dependsOn corsetExists

        module = moduleName
        files = ["alu/${moduleName}/columns.lisp"]
    }
}

//
// Special case: hub
//
tasks.register("hub", TraceFilesTask) {
    group "Trace files generation"
    dependsOn corsetExists

    module = 'hub'
    files = ['account', 'context', 'shared', 'stack', 'storage', 'transaction', 'scenario', 'miscellaneous']
            .collect {"hub_v2/columns/${it}.lisp"}
}

// Special case: PUB modules
['block', 'hash', 'log'].each { moduleName ->
    ['data', 'info'].each { submoduleName ->
        tasks.register("${moduleName}_${submoduleName}", TraceFilesTask) {
            group "Trace files generation"
            dependsOn corsetExists

            moduleDir = "${moduleName}/${submoduleName}"
            module = submoduleName
            files = ["pub/${moduleName}/${submoduleName}/${moduleName}.lisp"]
        }
    }
}

//
// Reference table
//
tasks.register('instructionDecoder', TraceFilesTask) {
    group "Trace files generation"
    dependsOn corsetExists

    moduleDir = "tables/instructionDecoder"
    module = "instructionDecoder"
    files = ["lookup_tables/tables/instruction_decoder.lisp"]
}
tasks.register('shfRT', TraceFilesTask) {
    group "Trace files generation"
    dependsOn corsetExists

    moduleDir = "tables/shf"
    module = "ShfRt"
    files = ["lookup_tables/shfRT/columns.lisp"]
}

//
// Modules requiring the library
//
['rlp_txrcpt', 'rlp_txn', 'rlpAddr', 'txn_data', 'logInfo', 'logData'].each {moduleName ->
    tasks.register(moduleName, TraceFilesTask) {
        group "Trace files generation"
        dependsOn corsetExists

        module = moduleName
        files = ["${moduleName}/columns.lisp", "library/rlp_constraints_pattern.lisp"]
    }
}

//
// Put here modules following the conventional MODULE/columns.lisp naming scheme
//
['bin', 'ec_data', 'mmu', 'mxp', 'shf', 'wcp', 'rom', 'romLex', 'trm'].each {moduleName ->
    tasks.register(moduleName, TraceFilesTask) {
        group "Trace files generation"
        dependsOn corsetExists

        module = moduleName
        files = ["${moduleName}/columns.lisp"]
    }
}
