/*
 * Copyright ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

abstract class TraceFilesTask extends Exec {
    @Input
    abstract Property<String> getModule()
    @Input
    abstract ListProperty<String> getFiles()
    @Input
    @Optional
    abstract Property<String> getModuleDir()

    @Override
    protected void exec() {
        def stdout = new ByteArrayOutputStream()
        def command = ["besu",
                       "-o", "src/main/java/net/consensys/linea/zktracer/module/${moduleDir.getOrElse(module.get())}",
                       "-P", module.get()]
        command.addAll(files.get().collect({"zkevm-constraints/${it}"}))

        workingDir project.rootDir
        executable "corset"
        args command
        standardOutput stdout

        println "Generating traces for ${module.get()} from ${files.get()}"
        super.exec()
    }
}

// Special case: ALU modules
['add', 'ext', 'mod', 'mul'].each { moduleName ->
    tasks.register(moduleName, TraceFilesTask) {
        group "Trace files generation"
        dependsOn corsetExists

        module = moduleName
        files = ["alu/${moduleName}/columns.lisp"]
    }
}

//
// Special case: hub
//
tasks.register("hub", TraceFilesTask) {
    group "Trace files generation"
    dependsOn corsetExists

    module = 'hub'
    files = ['account', 'context', 'shared', 'stack', 'storage', 'transaction']
            .collect {"hub_v2/columns/${it}.lisp"}
}

// Special case: PUB modules
['block', 'hash', 'log'].each { moduleName ->
    ['data', 'info'].each { submoduleName ->
        tasks.register("${moduleName}_${submoduleName}", TraceFilesTask) {
            group "Trace files generation"
            dependsOn corsetExists

            moduleDir = "${moduleName}/${submoduleName}"
            module = submoduleName
            files = ["pub/${moduleName}/${submoduleName}/${moduleName}.lisp"]
        }
    }
}

//
// Put here modules following the conventional MODULE/columns.lisp naming scheme
//
['bin', 'ec_data', 'mxp', 'rlp', 'rom', 'shf', 'tx_rlp', 'wcp'].each {moduleName ->
    tasks.register(moduleName, TraceFilesTask) {
        group "Trace files generation"
        dependsOn corsetExists

        module = moduleName
        files = ["${moduleName}/columns.lisp"]
    }
}
