/*
 * Copyright Consensys Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

tasks.register('sourcesJar', Jar) {
  dependsOn classes
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
  dependsOn javadoc
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

tasks.register('downloadLatestLineaBesu', Download) {
  ext.besuIdentifier = "linea-besu-" + besuVersion
  def besuFilename = besuIdentifier + ".tar.gz"
  def besuUrl = distributionBaseUrl + besuVersion + "/" + besuFilename

  src besuUrl
  dest new File(buildDir, besuFilename)
  onlyIfModified true
}

ext.besuPluginsIdentifier = distributionIdentifier + "-" + version

jar {
  dependsOn downloadLatestLineaBesu

  archiveBaseName = distributionIdentifier

  manifest {
    attributes(
      'Specification-Title': archiveBaseName.get(),
      'Specification-Version': rootProject.version,
      'Implementation-Title': archiveBaseName.get(),
      'Implementation-Version': calculateVersion()
    )
  }

  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
  duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

// Takes the version, and if -SNAPSHOT is part of it replaces SNAPSHOT
// with the git commit version.
def calculateVersion() {
  String version = rootProject.version
  if (version.endsWith("-SNAPSHOT")) {
    version = version.replace("-SNAPSHOT", "-dev-" + getCheckedOutGitCommitHash())
  }
  return version
}

def getCheckedOutGitCommitHash() {
  def gitFolder = "$projectDir/.git/"
  if (!file(gitFolder).isDirectory()) {
    // We are in a submodule.  The file's contents are `gitdir: <gitFolder>\n`.
    // Read the file, cut off the front, and trim the whitespace.
    gitFolder = file(gitFolder).text.substring(8).trim() + "/"
  }
  def takeFromHash = 8
  /*
   * '.git/HEAD' contains either
   *      in case of detached head: the currently checked out commit hash
   *      otherwise: a reference to a file containing the current commit hash
   */
  def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
  def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd

  if (isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

  def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
  refHead.text.trim().take takeFromHash
}

tasks.register('distTar', Tar) {
  dependsOn jar
  dependsOn downloadLatestLineaBesu

  from(tarTree(downloadLatestLineaBesu.dest), {
    eachFile { path = path.replaceFirst(downloadLatestLineaBesu.besuIdentifier, '') }
    includeEmptyDirs = false
    exclude "**/LICENSE"
  })

  from(configurations.installedJars) {
    into "plugins"
    exclude "**/common*.jar"
  }

  into besuPluginsIdentifier
  archiveBaseName = distributionIdentifier
  compression = Compression.GZIP
  archiveExtension = 'tar.gz'

  exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
  duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

tasks.register('installDist', Copy) {
  dependsOn distTar

  from(tarTree(distTar.outputs.getFiles().getSingleFile()), {
    eachFile { path = path.replaceFirst(besuPluginsIdentifier, distributionIdentifier) }
    includeEmptyDirs = false
  })
  into "$buildDir/distributions/install"
  duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

tasks.register('distZip', Zip) {
  dependsOn installDist

  archiveBaseName = distributionIdentifier
  from installDist.outputs.getFiles()
  archiveBaseName
  extension 'zip'
  duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

tasks.register("copyPluginJar") {
  dependsOn installDist

  doLast {
    def copyInto = File.createTempDir("plugins")
    def copyFrom = new File(getRootDir().toString() + "/build/libs")
    project.ext.pluginDir = copyInto.toString()

    copy {
      from copyFrom.toString()
      into copyInto.toString()
      include '*.jar'
    }
  }
}

tasks.register('deployPlugins', Copy) {
  dependsOn jar
  dependsOn installDist

  from(configurations.installedJars) {
    into new File(distributionIdentifier, "plugins")
    exclude "**/common*.jar"
  }

  into installDist.destinationDir
}