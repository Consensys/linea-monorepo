/*
 * Copyright Consensys Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

tasks.register('sourcesJar', Jar) {
  dependsOn classes
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
  dependsOn javadoc
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

version = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : 'snapshot'

jar {
  archiveBaseName = distributionIdentifier

  manifest {
    attributes(
      'Specification-Title': 'arithmetization',
      'Specification-Version': "v${arithmetizationVersion}",
      'Implementation-Title': 'arithmetization',
      'Implementation-Version': "v${arithmetizationVersion}"
    )
  }

 from {
    configurations.runtimeClasspath.filter( {! (it.name =~ /log4j.*\.jar/ )} )
            .collect {it.isDirectory() ? it : zipTree(it) }
  }
  exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'ch.qos.logback'
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

// Takes the version, and if -SNAPSHOT is part of it replaces SNAPSHOT
// with the git commit version.
def calculateVersion() {
  String version = rootProject.version
  if (version.endsWith("-SNAPSHOT")) {
    version = version.replace("-SNAPSHOT", "-dev-${getCheckedOutGitCommitHash()}")
  }

  return version
}

static def getCheckedOutGitCommitHash() {
  def hashLength = 8
  "git rev-parse HEAD".execute().text.take(hashLength)
}
