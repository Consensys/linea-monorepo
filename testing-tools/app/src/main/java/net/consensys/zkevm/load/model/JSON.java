/*
 * load simulation - OpenAPI 3.0
 * describe list of requests
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.consensys.zkevm.load.model;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;
import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import net.consensys.zkevm.load.swagger.*;
import okio.ByteString;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
  private static Gson gson;
  private static boolean isLenientOnJson = false;
  private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
  private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
  private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter =
      new OffsetDateTimeTypeAdapter();
  private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
  private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

  @SuppressWarnings("unchecked")
  public static GsonBuilder createGson() {
    GsonFireBuilder fireBuilder =
        new GsonFireBuilder()
            .registerTypeSelector(
                ArrayParameter.class,
                new TypeSelector<ArrayParameter>() {
                  @Override
                  public Class<? extends ArrayParameter> getClassForElement(
                      JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ArrayParameter", ArrayParameter.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "type"));
                  }
                })
            .registerTypeSelector(
                BatchMint.class,
                new TypeSelector<BatchMint>() {
                  @Override
                  public Class<? extends BatchMint> getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("BatchMint", BatchMint.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "type"));
                  }
                })
            .registerTypeSelector(
                CallContractReference.class,
                new TypeSelector<CallContractReference>() {
                  @Override
                  public Class<? extends CallContractReference> getClassForElement(
                      JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put(
                        "CallContractReference", CallContractReference.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "contractCallType"));
                  }
                })
            .registerTypeSelector(
                CallExistingContract.class,
                new TypeSelector<CallExistingContract>() {
                  @Override
                  public Class<? extends CallExistingContract> getClassForElement(
                      JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put(
                        "CallExistingContract", CallExistingContract.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "contractCallType"));
                  }
                })
            .registerTypeSelector(
                Contract.class,
                new TypeSelector<Contract>() {
                  @Override
                  public Class<? extends Contract> getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put(
                        "CallContractReference", CallContractReference.class);
                    classByDiscriminatorValue.put(
                        "CallExistingContract", CallExistingContract.class);
                    classByDiscriminatorValue.put("CreateContract", CreateContract.class);
                    classByDiscriminatorValue.put("Contract", Contract.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "contractCallType"));
                  }
                })
            .registerTypeSelector(
                ContractCall.class,
                new TypeSelector<ContractCall>() {
                  @Override
                  public Class<? extends ContractCall> getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ContractCall", ContractCall.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "scenarioType"));
                  }
                })
            .registerTypeSelector(
                CreateContract.class,
                new TypeSelector<CreateContract>() {
                  @Override
                  public Class<? extends CreateContract> getClassForElement(
                      JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("CreateContract", CreateContract.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "contractCallType"));
                  }
                })
            .registerTypeSelector(
                GenericCall.class,
                new TypeSelector<GenericCall>() {
                  @Override
                  public Class<? extends GenericCall> getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("GenericCall", GenericCall.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "type"));
                  }
                })
            .registerTypeSelector(
                MethodAndParameter.class,
                new TypeSelector<MethodAndParameter>() {
                  @Override
                  public Class<? extends MethodAndParameter> getClassForElement(
                      JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("BatchMint", BatchMint.class);
                    classByDiscriminatorValue.put("Mint", Mint.class);
                    classByDiscriminatorValue.put("TransferOwnership", TransferOwnership.class);
                    classByDiscriminatorValue.put("GenericCall", GenericCall.class);
                    classByDiscriminatorValue.put("MethodAndParameter", MethodAndParameter.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "type"));
                  }
                })
            .registerTypeSelector(
                Mint.class,
                new TypeSelector<Mint>() {
                  @Override
                  public Class<? extends Mint> getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("Mint", Mint.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "type"));
                  }
                })
            .registerTypeSelector(
                Parameter.class,
                new TypeSelector<Parameter>() {
                  @Override
                  public Class<? extends Parameter> getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ArrayParameter", ArrayParameter.class);
                    classByDiscriminatorValue.put("SimpleParameter", SimpleParameter.class);
                    classByDiscriminatorValue.put("Parameter", Parameter.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "type"));
                  }
                })
            .registerTypeSelector(
                RoundRobinMoneyTransfer.class,
                new TypeSelector<RoundRobinMoneyTransfer>() {
                  @Override
                  public Class<? extends RoundRobinMoneyTransfer> getClassForElement(
                      JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put(
                        "RoundRobinMoneyTransfer", RoundRobinMoneyTransfer.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "scenarioType"));
                  }
                })
            .registerTypeSelector(
                Scenario.class,
                new TypeSelector<Scenario>() {
                  @Override
                  public Class<? extends Scenario> getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ContractCall", ContractCall.class);
                    classByDiscriminatorValue.put(
                        "RoundRobinMoneyTransfer", RoundRobinMoneyTransfer.class);
                    classByDiscriminatorValue.put(
                        "SelfTransactionWithPayload", SelfTransactionWithPayload.class);
                    classByDiscriminatorValue.put(
                        "SelfTransactionWithRandomPayload", SelfTransactionWithRandomPayload.class);
                    classByDiscriminatorValue.put(
                        "UnderPricedTransaction", UnderPricedTransaction.class);
                    classByDiscriminatorValue.put("Scenario", Scenario.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "scenarioType"));
                  }
                })
            .registerTypeSelector(
                SelfTransactionWithPayload.class,
                new TypeSelector<SelfTransactionWithPayload>() {
                  @Override
                  public Class<? extends SelfTransactionWithPayload> getClassForElement(
                      JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put(
                        "SelfTransactionWithPayload", SelfTransactionWithPayload.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "scenarioType"));
                  }
                })
            .registerTypeSelector(
                SelfTransactionWithRandomPayload.class,
                new TypeSelector<SelfTransactionWithRandomPayload>() {
                  @Override
                  public Class<? extends SelfTransactionWithRandomPayload> getClassForElement(
                      JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put(
                        "SelfTransactionWithRandomPayload", SelfTransactionWithRandomPayload.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "scenarioType"));
                  }
                })
            .registerTypeSelector(
                SimpleParameter.class,
                new TypeSelector<SimpleParameter>() {
                  @Override
                  public Class<? extends SimpleParameter> getClassForElement(
                      JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("SimpleParameter", SimpleParameter.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "type"));
                  }
                })
            .registerTypeSelector(
                TransferOwnership.class,
                new TypeSelector<TransferOwnership>() {
                  @Override
                  public Class<? extends TransferOwnership> getClassForElement(
                      JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("TransferOwnership", TransferOwnership.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "type"));
                  }
                })
            .registerTypeSelector(
                UnderPricedTransaction.class,
                new TypeSelector<UnderPricedTransaction>() {
                  @Override
                  public Class<? extends UnderPricedTransaction> getClassForElement(
                      JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put(
                        "UnderPricedTransaction", UnderPricedTransaction.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "scenarioType"));
                  }
                });
    GsonBuilder builder = fireBuilder.createGsonBuilder();
    return builder;
  }

  private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
    JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
    if (null == element) {
      throw new IllegalArgumentException(
          "missing discriminator field: <" + discriminatorField + ">");
    }
    return element.getAsString();
  }

  /**
   * Returns the Java class that implements the OpenAPI schema for the specified discriminator
   * value.
   *
   * @param classByDiscriminatorValue The map of discriminator values to Java classes.
   * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
   * @return The Java class that implements the OpenAPI schema
   */
  private static Class getClassByDiscriminator(
      Map classByDiscriminatorValue, String discriminatorValue) {
    Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
    if (null == clazz) {
      throw new IllegalArgumentException(
          "cannot determine model class of name: <" + discriminatorValue + ">");
    }
    return clazz;
  }

  {
    GsonBuilder gsonBuilder = createGson();
    gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
    gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
    gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
    gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
    gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
    gsonBuilder.registerTypeAdapterFactory(new ArrayParameter.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new BatchMint.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new CallContractReference.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new CallExistingContract.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new Context.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new ContractCall.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new CreateContract.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new GenericCall.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new Mint.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new Request.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new RoundRobinMoneyTransfer.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new ScenarioDefinition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new SelfTransactionWithPayload.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new SelfTransactionWithRandomPayload.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new SimpleParameter.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new TransferOwnership.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(new UnderPricedTransaction.CustomTypeAdapterFactory());
    gson = gsonBuilder.create();
  }

  /**
   * Get Gson.
   *
   * @return Gson
   */
  public static Gson getGson() {
    return gson;
  }

  /**
   * Set Gson.
   *
   * @param gson Gson
   */
  public static void setGson(Gson gson) {
    JSON.gson = gson;
  }

  public static void setLenientOnJson(boolean lenientOnJson) {
    isLenientOnJson = lenientOnJson;
  }

  /**
   * Serialize the given Java object into JSON string.
   *
   * @param obj Object
   * @return String representation of the JSON
   */
  public static String serialize(Object obj) {
    return gson.toJson(obj);
  }

  /**
   * Deserialize the given JSON string to Java object.
   *
   * @param <T> Type
   * @param body The JSON string
   * @param returnType The type to deserialize into
   * @return The deserialized Java object
   */
  @SuppressWarnings("unchecked")
  public static <T> T deserialize(String body, Type returnType) {
    try {
      if (isLenientOnJson) {
        JsonReader jsonReader = new JsonReader(new StringReader(body));
        // see
        // https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
        jsonReader.setLenient(true);
        return gson.fromJson(jsonReader, returnType);
      } else {
        return gson.fromJson(body, returnType);
      }
    } catch (JsonParseException e) {
      // Fallback processing when failed to parse JSON form response body:
      // return the response body string directly for the String return type;
      if (returnType.equals(String.class)) {
        return (T) body;
      } else {
        throw (e);
      }
    }
  }

  /** Gson TypeAdapter for Byte Array type */
  public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

    @Override
    public void write(JsonWriter out, byte[] value) throws IOException {
      if (value == null) {
        out.nullValue();
      } else {
        out.value(ByteString.of(value).base64());
      }
    }

    @Override
    public byte[] read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String bytesAsBase64 = in.nextString();
          ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
          return byteString.toByteArray();
      }
    }
  }

  /** Gson TypeAdapter for JSR310 OffsetDateTime type */
  public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

    private DateTimeFormatter formatter;

    public OffsetDateTimeTypeAdapter() {
      this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
    }

    public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
      this.formatter = formatter;
    }

    public void setFormat(DateTimeFormatter dateFormat) {
      this.formatter = dateFormat;
    }

    @Override
    public void write(JsonWriter out, OffsetDateTime date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        out.value(formatter.format(date));
      }
    }

    @Override
    public OffsetDateTime read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String date = in.nextString();
          if (date.endsWith("+0000")) {
            date = date.substring(0, date.length() - 5) + "Z";
          }
          return OffsetDateTime.parse(date, formatter);
      }
    }
  }

  /** Gson TypeAdapter for JSR310 LocalDate type */
  public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

    private DateTimeFormatter formatter;

    public LocalDateTypeAdapter() {
      this(DateTimeFormatter.ISO_LOCAL_DATE);
    }

    public LocalDateTypeAdapter(DateTimeFormatter formatter) {
      this.formatter = formatter;
    }

    public void setFormat(DateTimeFormatter dateFormat) {
      this.formatter = dateFormat;
    }

    @Override
    public void write(JsonWriter out, LocalDate date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        out.value(formatter.format(date));
      }
    }

    @Override
    public LocalDate read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String date = in.nextString();
          return LocalDate.parse(date, formatter);
      }
    }
  }

  public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
    offsetDateTimeTypeAdapter.setFormat(dateFormat);
  }

  public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
    localDateTypeAdapter.setFormat(dateFormat);
  }

  /**
   * Gson TypeAdapter for java.sql.Date type If the dateFormat is null, a simple "yyyy-MM-dd" format
   * will be used (more efficient than SimpleDateFormat).
   */
  public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

    private DateFormat dateFormat;

    public SqlDateTypeAdapter() {}

    public SqlDateTypeAdapter(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    public void setFormat(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    @Override
    public void write(JsonWriter out, java.sql.Date date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        String value;
        if (dateFormat != null) {
          value = dateFormat.format(date);
        } else {
          value = date.toString();
        }
        out.value(value);
      }
    }

    @Override
    public java.sql.Date read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String date = in.nextString();
          try {
            if (dateFormat != null) {
              return new java.sql.Date(dateFormat.parse(date).getTime());
            }
            return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
          } catch (ParseException e) {
            throw new JsonParseException(e);
          }
      }
    }
  }

  /**
   * Gson TypeAdapter for java.util.Date type If the dateFormat is null, ISO8601Utils will be used.
   */
  public static class DateTypeAdapter extends TypeAdapter<Date> {

    private DateFormat dateFormat;

    public DateTypeAdapter() {}

    public DateTypeAdapter(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    public void setFormat(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    @Override
    public void write(JsonWriter out, Date date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        String value;
        if (dateFormat != null) {
          value = dateFormat.format(date);
        } else {
          value = ISO8601Utils.format(date, true);
        }
        out.value(value);
      }
    }

    @Override
    public Date read(JsonReader in) throws IOException {
      try {
        switch (in.peek()) {
          case NULL:
            in.nextNull();
            return null;
          default:
            String date = in.nextString();
            try {
              if (dateFormat != null) {
                return dateFormat.parse(date);
              }
              return ISO8601Utils.parse(date, new ParsePosition(0));
            } catch (ParseException e) {
              throw new JsonParseException(e);
            }
        }
      } catch (IllegalArgumentException e) {
        throw new JsonParseException(e);
      }
    }
  }

  public static void setDateFormat(DateFormat dateFormat) {
    dateTypeAdapter.setFormat(dateFormat);
  }

  public static void setSqlDateFormat(DateFormat dateFormat) {
    sqlDateTypeAdapter.setFormat(dateFormat);
  }
}
