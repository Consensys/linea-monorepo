package smt_test

import (
	"testing"

	"github.com/consensys/linea-monorepo/prover/crypto/state-management/hashtypes"
	"github.com/consensys/linea-monorepo/prover/crypto/state-management/smt"
	. "github.com/consensys/linea-monorepo/prover/utils/types"
	"github.com/stretchr/testify/require"
)

// Root hash of the empty tree
func TestEmptyRootHashMiMC(t *testing.T) {
	config := &smt.Config{
		HashFunc: hashtypes.MiMC,
		Depth:    40,
	}

	tree := smt.NewEmptyTree(config)

	// Root hash of the empty tree
	require.Equal(
		t,
		"0x09c43afd684b1243cc64af08b18565a71a7f504ecf9721f3c1cd3704f71bdff6",
		tree.Root.Hex(),
	)
}

// Root hash of the tree after writing the leaf 0x1
func TestOneLeafRootHashMiMC(t *testing.T) {

	config := &smt.Config{
		HashFunc: hashtypes.MiMC,
		Depth:    40,
	}

	tree := smt.NewEmptyTree(config)

	// Insert leaf `0x1` in position zero
	leaf := Bytes32{}
	leaf[31] = 1
	tree.Update(0, leaf)

	require.Equal(
		t,
		"0x0328b0bdc233b70c02e3d9fe7931a033dae1f9b935561f9f4c22306255ea9a67",
		tree.Root.Hex(),
	)
}

// Test merkle-proof at a random position on an empty tree
func TestDefaultMerkleProofMiMC(t *testing.T) {

	config := &smt.Config{
		HashFunc: hashtypes.MiMC,
		Depth:    40,
	}

	tree := smt.NewEmptyTree(config)
	proof, _ := tree.Prove(37)

	require.Equal(t,
		"&smt.Proof{Path: 37, Siblings: [0000000000000000000000000000000000000000000000000000000000000000 022efa6a7d3f639a3831916b27daaa5cbcaf1165e47f04ffbe1e707e30a32469 03d32149dded57ddc5b1de7982c50ddebd44938118a1a7a77c05d0cd3893e7af 09827c8482e0ad5f566e0f3937a04a99eb8298c5fd10d812cb95cf53144488d2 106fa28252bc7a4d5e84940fcd0b9120f59c371f9977c6e42384bed365d908b9 0188ae0e9b728197d8ce998ac605b16f87d5c815690918525f3f19c6d10e0659 09c64ccd7021b40f4578f1ee24de81f079f7b0aa6e8a52a1b0833c1d219f32a8 0df25a23a4aa91719cb5445e6b1944078f1cbdf2de3b12ab37d63fb9d7e89007 06644a89954a1e4c49903c218d78dd5b09419db3088f84c919c938a5f98eda17 0edd0129edd35191a183ecd28cbcab2a48ad381215d8544acf35248639835dcd 0b971345bfa43e192ca2fb1c9ddd19f2dddf461243b1a54fdd5a4d581f850c11 09ea86c5cd59ac4bfca4e46e7b50bb37c8327350888ba71112ecf3f5093baaef 10c439d656480d21a08c068717556fb8104a7a76e26f60e393ce4e36ae21e07b 08b60393196453ee74fdf240449d9aa2569875b43596ea2621eecda8d8909acd 0f3f9cf1e5ba6bdbb6daafc405bcceac97270fe89265b6a0faa2ba4bfd5cbf5d 0b03678742039acaae14fd3964e2d6261b74410043c536f07bcf1bc4495d9f84 0133209cd7936e208da6b743428ff7195e8ef92d3dac72472146ac7497355ed1 070382f72e9f322433fb44fc4acfefd74b277b19b6cc1784379e7ca7338a2978 02a9fd706c3c223f9374481b7495fb775c1675407556d93f1edabfe54b3fc9b2 1276c046afd611be02a66cf85498d7210a15293357afe07968a86c89356662f5 0e42718d49cb8c4be515181eda51f41d3b8198af5a2139a4670a8ee06b904a2b 0defe934a1ae079cf6ec6022145b60128eeb30503eea4404da990fc2b2430ea8 0b7a8a9fe0ee619c9bd7ff504dcb47bdce0193546b53a79dedd5251f4f56f36c 0b2ae68e3af633dac72090cc9c9b0dce76cebf5117101a265f54b3b9a851b3cd 004d50e626bda007887a31f60883e58bce50a1a3e7a3384b9ec18dab319dd458 079081f446c9a0c7b404834742cea1909426ccfc4696d19e1a08531b0cc30368 0969f4e85b86f0eb36ad13dfb1f35346d7d6518308dc27e73452c649850f1a89 1092d1b2349c4fbc88ea0202cf88685e4e316c99697063f786201b27d46e2c22 11c8aeb3dc3ca059a29ba20d4471b20987d74a0d79ff8ecda247df6a02eca554 014030b5cbe31660da2d33b6b1265b82bbde9a7ab7f331f8b274f2b798a45a3b 0cdf7d06a4b4b0e71713048f5f6ea86016467e909a27bfeeeca67b56c17e2739 0f5dc218160db17cfe8044d7ac4fd55dfcbdf2676815e2c15388f189bf144cd8 07f048ac696418580a55a864a10ed030871fd615d5ab460c54d6184c16441d48 11c8e229e3e2ae40a4959e036d500753aaedb52cda67d9caf60f0629f0b4f306 090d53176fd185da729d0d68e0c0e646ef148f15864685f4ba56be7b7cbb2484 01f35ef342eaa841ee4306d38f2a1adeafe8967d23c31fe1a379b9a69353da6d 0a06dc31ae8e893bca0a076decb8c0caa9036b5f394abf79d7956411eef32255 060f08aed06ffb90efc9705dc38d37a7000da1add99cef1b8a84b9e72e7c8b7b 008a47a2a53dd5183a2dc127c399a004e2a6c7e60f73e104d7d79e6a2bd7e809 09e70d042c8766d9609b6d8169e4e99c664be32a9a4d6461726723723118cfbe]}",
		proof.String(),
	)
}

// Test merkle-proof at a random position on a non-empty tree
func TestMerkleProofAfterUpdateMiMC(t *testing.T) {

	config := &smt.Config{
		HashFunc: hashtypes.MiMC,
		Depth:    40,
	}

	tree := smt.NewEmptyTree(config)

	// Insert 0x0 at position 0, 0x1 at position 1 and so on
	for i := 0; i < 1024; i++ {
		leaf := Bytes32{}
		leaf[31] = byte(i & 0xff)
		leaf[30] = byte(i & 0xff00)
		tree.Update(i, leaf)
	}

	require.Equal(
		t,
		"0x0532f7a190d15e9f647be8189dc74ff49539bfde112dbaf4c36b18a6b2315033",
		tree.Root.Hex(),
	)

	proof, _ := tree.Prove(37)

	require.Equal(
		t,
		"&smt.Proof{Path: 37, Siblings: [0000000000000000000000000000000000000000000000000000000000000024 0cb504db0146d0adba7e7a82fa2b522072d21ca2dacfec0ccae44703822e8ffd 0cd630cd5dfd0a9530f0225f30100fa4dd92c0048e443eb68794230271b91b07 0779251c67c6eef59906abe1c3fcc378aa93fe7709453830a2f3dfadb0bad55d 0e52c72733c09938b7b60187bdc56c691aa4b7d2e87d2c48215bab99fc2e9171 018fd3efb55364dee0d64dfd6879a8738a023bf02e90bf0a43dad885bf056b25 0e8055d8d7d432800d5105ec57c1e4522463b2e2763bb664751179feffc5047f 11ee76ad6346b633d7c420da0c5103610b61f9b4199d191a79734247cc4563c1 10e70b9621c58373283e9eea24e0094b2de3adc9f3bba6e29ca2c404c4bd0f15 047f9280e227f52819f3214e14212ef27b9efa5c283261863e66f50cf5651758 0b971345bfa43e192ca2fb1c9ddd19f2dddf461243b1a54fdd5a4d581f850c11 09ea86c5cd59ac4bfca4e46e7b50bb37c8327350888ba71112ecf3f5093baaef 10c439d656480d21a08c068717556fb8104a7a76e26f60e393ce4e36ae21e07b 08b60393196453ee74fdf240449d9aa2569875b43596ea2621eecda8d8909acd 0f3f9cf1e5ba6bdbb6daafc405bcceac97270fe89265b6a0faa2ba4bfd5cbf5d 0b03678742039acaae14fd3964e2d6261b74410043c536f07bcf1bc4495d9f84 0133209cd7936e208da6b743428ff7195e8ef92d3dac72472146ac7497355ed1 070382f72e9f322433fb44fc4acfefd74b277b19b6cc1784379e7ca7338a2978 02a9fd706c3c223f9374481b7495fb775c1675407556d93f1edabfe54b3fc9b2 1276c046afd611be02a66cf85498d7210a15293357afe07968a86c89356662f5 0e42718d49cb8c4be515181eda51f41d3b8198af5a2139a4670a8ee06b904a2b 0defe934a1ae079cf6ec6022145b60128eeb30503eea4404da990fc2b2430ea8 0b7a8a9fe0ee619c9bd7ff504dcb47bdce0193546b53a79dedd5251f4f56f36c 0b2ae68e3af633dac72090cc9c9b0dce76cebf5117101a265f54b3b9a851b3cd 004d50e626bda007887a31f60883e58bce50a1a3e7a3384b9ec18dab319dd458 079081f446c9a0c7b404834742cea1909426ccfc4696d19e1a08531b0cc30368 0969f4e85b86f0eb36ad13dfb1f35346d7d6518308dc27e73452c649850f1a89 1092d1b2349c4fbc88ea0202cf88685e4e316c99697063f786201b27d46e2c22 11c8aeb3dc3ca059a29ba20d4471b20987d74a0d79ff8ecda247df6a02eca554 014030b5cbe31660da2d33b6b1265b82bbde9a7ab7f331f8b274f2b798a45a3b 0cdf7d06a4b4b0e71713048f5f6ea86016467e909a27bfeeeca67b56c17e2739 0f5dc218160db17cfe8044d7ac4fd55dfcbdf2676815e2c15388f189bf144cd8 07f048ac696418580a55a864a10ed030871fd615d5ab460c54d6184c16441d48 11c8e229e3e2ae40a4959e036d500753aaedb52cda67d9caf60f0629f0b4f306 090d53176fd185da729d0d68e0c0e646ef148f15864685f4ba56be7b7cbb2484 01f35ef342eaa841ee4306d38f2a1adeafe8967d23c31fe1a379b9a69353da6d 0a06dc31ae8e893bca0a076decb8c0caa9036b5f394abf79d7956411eef32255 060f08aed06ffb90efc9705dc38d37a7000da1add99cef1b8a84b9e72e7c8b7b 008a47a2a53dd5183a2dc127c399a004e2a6c7e60f73e104d7d79e6a2bd7e809 09e70d042c8766d9609b6d8169e4e99c664be32a9a4d6461726723723118cfbe]}",
		proof.String(),
	)
}
