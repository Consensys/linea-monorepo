package types

import (
	"bytes"
	"encoding/json"
	"math/big"
	"strconv"
	"testing"

	"github.com/consensys/linea-monorepo/prover/utils"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestAccountUnmarshalJSON(t *testing.T) {

	testJson := `{"key": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003431c41acc261451aae253f621857172d6339919d18059f35921a50aafc69eb5c397b688b215329825e5b00e4aa4e1857bc17afab503a87ecc063614b9b227106b2c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}`
	var unmarshaled struct {
		Key Account `json:"key"`
	}

	// We should recover the original account
	err := json.Unmarshal([]byte(testJson), &unmarshaled)
	require.NoErrorf(t, err, "could not parse the json")

	account := unmarshaled.Key
	require.Equal(t, account.Nonce, int64(65))
	require.Equal(t, account.Balance, big.NewInt(835))
	require.Equal(t, account.StorageRoot.Hex(), "0x1c41acc261451aae253f621857172d6339919d18059f35921a50aafc69eb5c39")
	require.Equal(t, account.Poseidon2CodeHash.Hex(), "0x7b688b215329825e5b00e4aa4e1857bc17afab503a87ecc063614b9b227106b2")
	require.Equal(t, account.KeccakCodeHash.Hex(), "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
	require.Equal(t, account.CodeSize, int64(0))
}

func TestAccountMarshalUnmarshalJSON(t *testing.T) {

	tcases := []struct {
		Account   Account
		HexString string
	}{
		{
			Account: Account{
				Balance: big.NewInt(0),
			},
			HexString: "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			// EOA
			Account: Account{
				Nonce:             65,
				Balance:           big.NewInt(5690),
				StorageRoot:       Bytes32FromHex("0x0b1dfeef3db4956540da8a5f785917ef1ba432e521368da60a0a1ce430425666"),
				Poseidon2CodeHash: Bytes32FromHex("0x729aac4455d43f2c69e53bb75f8430193332a4c32cafd9995312fa8346929e73"),
				KeccakCodeHash:    FullBytes32FromHex("0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"),
				CodeSize:          0,
			},
			HexString: "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000163a0b1dfeef3db4956540da8a5f785917ef1ba432e521368da60a0a1ce430425666729aac4455d43f2c69e53bb75f8430193332a4c32cafd9995312fa8346929e73c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			// Another EOA
			Account: Account{
				Nonce:             65,
				Balance:           big.NewInt(835),
				StorageRoot:       Bytes32FromHex("0x1c41acc261451aae253f621857172d6339919d18059f35921a50aafc69eb5c39"),
				Poseidon2CodeHash: Bytes32FromHex("0x7b688b215329825e5b00e4aa4e1857bc17afab503a87ecc063614b9b227106b2"),
				KeccakCodeHash:    FullBytes32FromHex("0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"),
				CodeSize:          0,
			},
			HexString: "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003431c41acc261451aae253f621857172d6339919d18059f35921a50aafc69eb5c397b688b215329825e5b00e4aa4e1857bc17afab503a87ecc063614b9b227106b2c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
	}

	for _, c := range tcases {
		marshalled, _ := json.Marshal(c.Account)
		assert.Equal(t, strconv.Quote(c.HexString), string(marshalled))
		var acc Account
		err := json.Unmarshal(marshalled, &acc)
		assert.NoErrorf(t, err, "failed unmarshalling")
		assert.Equalf(t, acc, c.Account, "deserialized account mismatch")
	}
}

func TestReadWriteAccountUnpacked(t *testing.T) {

	tcases := []struct {
		Account   Account
		HexString string
	}{
		{
			Account: Account{
				Balance: big.NewInt(0),
			},
			HexString: "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			// EOA
			Account: Account{
				Nonce:             65,
				Balance:           big.NewInt(5690),
				StorageRoot:       Bytes32FromHex("0x0b1dfeef3db4956540da8a5f785917ef1ba432e521368da60a0a1ce430425666"),
				Poseidon2CodeHash: Bytes32FromHex("0x729aac4455d43f2c69e53bb75f8430193332a4c32cafd9995312fa8346929e73"),
				KeccakCodeHash:    FullBytes32FromHex("0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"),
				CodeSize:          0,
			},
			HexString: "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000163a0b1dfeef3db4956540da8a5f785917ef1ba432e521368da60a0a1ce430425666729aac4455d43f2c69e53bb75f8430193332a4c32cafd9995312fa8346929e730000c5d200004601000086f70000233c0000927e00007db20000dcc7000003c00000e5000000b6530000ca820000273b00007bfa0000d80400005d850000a47000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			// Another EOA
			Account: Account{
				Nonce:             65,
				Balance:           big.NewInt(835),
				StorageRoot:       Bytes32FromHex("0x1c41acc261451aae253f621857172d6339919d18059f35921a50aafc69eb5c39"),
				Poseidon2CodeHash: Bytes32FromHex("0x7b688b215329825e5b00e4aa4e1857bc17afab503a87ecc063614b9b227106b2"),
				KeccakCodeHash:    FullBytes32FromHex("0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"),
				CodeSize:          0,
			},
			HexString: "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003431c41acc261451aae253f621857172d6339919d18059f35921a50aafc69eb5c397b688b215329825e5b00e4aa4e1857bc17afab503a87ecc063614b9b227106b20000c5d200004601000086f70000233c0000927e00007db20000dcc7000003c00000e5000000b6530000ca820000273b00007bfa0000d80400005d850000a47000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
	}

	for _, c := range tcases {
		buf := &bytes.Buffer{}
		_, err := c.Account.WriteTo(buf)

		bufHex := utils.HexEncodeToString(buf.Bytes())
		assert.Equal(t, c.HexString, bufHex)

		require.NoError(t, err)
		var acc Account
		_, err = acc.ReadFrom(buf)
		require.NoError(t, err)
		assert.Equal(t, c.Account, acc)
	}

}
