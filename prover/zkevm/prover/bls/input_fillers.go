package bls

import (
	"fmt"

	"github.com/consensys/linea-monorepo/prover/maths/field"
	"github.com/consensys/linea-monorepo/prover/protocol/dedicated/plonk"
)

const (
	millerLoopInputFillerKey       = "bls12381-miller-loop-input-filler"
	finalExpInputFillerKey         = "bls12381-final-exp-input-filler"
	pointEvalInputFillerKey        = "bls12381-point-eval-input-filler"
	pointEvalFailureInputFillerKey = "bls12381-point-eval-failure-input-filler"
)

func init() {
	plonk.RegisterInputFiller(membershipInputFillerKey(G1, CURVE), newMembershipInputFiller(G1, CURVE))
	plonk.RegisterInputFiller(membershipInputFillerKey(G2, CURVE), newMembershipInputFiller(G2, CURVE))
	plonk.RegisterInputFiller(membershipInputFillerKey(G1, GROUP), newMembershipInputFiller(G1, GROUP))
	plonk.RegisterInputFiller(membershipInputFillerKey(G2, GROUP), newMembershipInputFiller(G2, GROUP))
	plonk.RegisterInputFiller(millerLoopInputFillerKey, inputfillerMillerLoop)
	plonk.RegisterInputFiller(finalExpInputFillerKey, inputFillerFinalExp)
	plonk.RegisterInputFiller(mapToGroupInputFillerKey(G1), inputFillerMapToG1)
	plonk.RegisterInputFiller(mapToGroupInputFillerKey(G2), inputFillerMapToG2)
	plonk.RegisterInputFiller(pointEvalInputFillerKey, inputFillerPointEvaluation)
	plonk.RegisterInputFiller(pointEvalFailureInputFillerKey, inputFillerPointEvaluationFailure)
}

func membershipInputFillerKey(g group, m membership) string {
	base := "bls12381-%s-membership-input-filler"
	switch m {
	case CURVE:
		return fmt.Sprintf(base, g.StringCurve())
	case GROUP:
		return fmt.Sprintf(base, g.String())
	default:
		panic(fmt.Sprintf("unknown membership type %v for group %v", m, g))
	}
}

func newMembershipInputFiller(g group, _ membership) plonk.InputFiller {
	// we generate points not on curve --> also not in group
	return func(circuitInstance, inputIndex int) field.Element {
		nbL := nbLimbs(g)
		if (inputIndex+1)%(nbL/2) == 0 {
			return field.One()
		} else {
			return field.Zero()
		}
	}
}

func inputfillerMillerLoop(circuitInstance, inputIndex int) field.Element {
	// prev = 1
	// p = g1 gen
	// q = g2 gen
	// curr = e(p, q)
	tbl := []string{
		"0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000001",
		"0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000", "0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000", "0x09ece308f9d1f0131765212deca99697", "0xb112d61f9be9a5f1f3780a51335b3ff9", "0x81747a0b2ca2179b96d2c0c9024e5224",
		"0x00000000000000000000000000000000", "0x032b80d3a6f5b09f8a84623389c5f80c", "0xa69a0cddabc3097f9d9c27310fd43be6", "0xe745256c634af45ca3473b0590ae30d1",
		"0x00000000000000000000000000000000", "0x0a4edef9c1ed7f729f520e47730a124f", "0xd70662a904ba1074728114d1031e1572", "0xc6c886f6b57ec72a6178288c47c33577",
		"0x00000000000000000000000000000000", "0x1638533957d540a9d2370f17cc7ed586", "0x3bc0b995b8825e0ee1ea1e1e4d00dbae", "0x81f14b0bf3611b78c952aacab827a053",
		"0x00000000000000000000000000000000", "0x0f6d4552fa65dd2638b361543f887136", "0xa43253d9c66c411697003f7a13c308f5", "0x422e1aa0a59c8967acdefd8b6e36ccf3",
		"0x00000000000000000000000000000000", "0x0468fb440d82b0630aeb8dca2b525678", "0x9a66da69bf91009cbfe6bd221e47aa8a", "0xe88dece9764bf3bd999d95d71e4c9899",
		"0x00000000000000000000000000000000", "0x0054feaed82ead3a41c8abcd0eb1041a", "0xd2fe424577338e88ed49793751ba1df5", "0xdf7c60cd929d96af536138d3622d1e1f",
		"0x00000000000000000000000000000000", "0x1896860897a1550a11b7dcb8f08f0619", "0x793426fbf40eadcfa67b99f876d559a5", "0xbe8a7952f064f10a3c86c8b800db6dc7",
		"0x00000000000000000000000000000000", "0x10d461b121b4e83cf39e5b92a88a7a0b", "0x7c6a12603d0819043839208b8fb7663a", "0x319ca57a82fb296dab959e53ab22c305",
		"0x00000000000000000000000000000000", "0x1797037653cbd4555a3976fe14da01ad", "0x864be7cd23768280c62fcd99d6a69d87", "0x2d812f340e93220dfac5249fd74120c4",
		"0x00000000000000000000000000000000", "0x166bbd6883f96dcf75478dc649ce1bac", "0xefe626b9d621a745ac1b84261e5e45a5", "0xb2f5f850ff43e59c6508dac5e911ac56",
		"0x00000000000000000000000000000000", "0x04278944b14d0bc7418a84ee3b6cb806", "0xd5c9281b9c01c24b282071ef0b747eae", "0x49b7c7849fb878a58abb5c07b8d756d4",
		"0x00000000000000000000000000000000", "0x11fd87ad49dd390187684da5873cee05", "0x118dac54854f7f02df937e785d5e1809", "0x586cba4165198e5dc57badf023fbd91a",
		"0x00000000000000000000000000000000", "0x0a2308f392ecd05df00a38ab0b984eb7", "0xaf3ea84f4e11d03027de131c64cce348", "0x7dfb35c3daae32985c925cb71847b1ee",
		"0x00000000000000000000000000000000", "0x084d5dbfdfc2953d8d78a31368165425", "0xcb1050b13b5dfc8b622f2f8399894e28", "0xa506a0c72860dc396fa012592aa80e35",
		"0x00000000000000000000000000000000", "0x01ca8a8579f105b245b1507349805424", "0x8dc9e57b6398c68d14879a1b9bb843ce", "0x9d61f975640aba9e9405210e4483d304",
		"0x00000000000000000000000000000000", "0x14de5c730ce2468dc697a70a258ada19", "0xb41dd83ac859e2e8b2486b55764972fe", "0x67b809992911999cdbd77ca7906b192f",
		"0x00000000000000000000000000000000", "0x1891075ace9a85eed267d68f8e22e5d7", "0x93fd8cdd0c5603894509467df02ef6be", "0xc739546f6d55695a4d5bb24999e2fe20",
	}
	var res field.Element
	_, err := res.SetString(tbl[inputIndex%nbRowsPerMillerLoop])
	if err != nil {
		panic(fmt.Sprintf("failed to set string: %v", err))
	}
	return res
}

func inputFillerFinalExp(circuitInstance, inputIndex int) field.Element {
	// accumulator e(-p, q)
	// inputs e(p, q)
	// result e(-p, q) * e(p, q) == 1
	tbl := []string{
		"0x00000000000000000000000000000000", "0x04b3b48125b06267a063738aaf1beb1e", "0x58d3f2eed52764ab0b0f13b89534d6c2", "0xeeed4072f2dcc304b29f01211e1a57af",
		"0x00000000000000000000000000000000", "0x07175fb8c03924a24b0a90e8d1699192", "0xfeed2ffeb111a26cd5f4e1cf827775fe", "0xd936fe8155224f47906e4acf9ac75610",
		"0x00000000000000000000000000000000", "0x06cebc0cdc06b36d985563ccc72c603d", "0x5023c322285f17f3a278d3c9b45a5812", "0xfbc778f080ed76059ae99da43d392cdc",
		"0x00000000000000000000000000000000", "0x17808cef4c14fa8b87cba1a9b11df9bc", "0x7a6dc79882f1a149ce942919643a8925", "0xea9f0de06c0df24e6724ffe6bcac8c65",
		"0x00000000000000000000000000000000", "0x0fe9b210a0c9b02109d7f37fa2cd3d6a", "0x19cd0dcb26709c86082e8eac8322afdb", "0x5acbb8a8794c04915daff76a9e1e5127",
		"0x00000000000000000000000000000000", "0x00beff4984c303ebad04dd513688ee04", "0x20e5657e1ece66e135301a06a521c5c6", "0x981c529705c51c5a84843a869cbbecd9",
		"0x00000000000000000000000000000000", "0x07764c0e8417987a6b20455bd4690b77", "0xf8a89c2a7fddf3e308e4ee23f7879512", "0x2bd6a0bedf2b7271b8497fc6b2098bce",
		"0x00000000000000000000000000000000", "0x0640460556c7ca962f1f93f7a2039b07", "0xe23af083fb37f39b1b891d0894beb94c", "0x73e2892fda7847ee38bc58e3f3736367",
		"0x00000000000000000000000000000000", "0x141226bd375096d522913873d05e915f", "0x5ef67111028ac9d8a228d28971fd1dfb", "0xf795428532359deccda0f3ff6934b2e8",
		"0x00000000000000000000000000000000", "0x0d4688ae2f1a7d8878cab6a018776f83", "0x398aab761e4f2a1319940abff28bc5cf", "0x74a68bfe456383fbb4490033208da951",
		"0x00000000000000000000000000000000", "0x0abc7896c3c3ef4c5f917102686c1fc7", "0xf8719f2301778c9124ca0b64e42cc95d", "0x265705397d0021c4b2ce8a1e8b6ad8c1",
		"0x00000000000000000000000000000000", "0x06560beb7fbe9504134bb319c5d376a3", "0xf85b5c83690c0e8b23a90fbe7ac4580b", "0x3223f2a29590580eb6783a4338f095db",
		"0x00000000000000000000000000000000", "0x17f1d3a73197d7942695638c4fa9ac0f", "0xc3688c4f9774b905a14e3a3f171bac58", "0x6c55e83ff97a1aeffb3af00adb22c6bb",
		"0x00000000000000000000000000000000", "0x08b3f481e3aaa0f1a09e30ed741d8ae4", "0xfcf5e095d5d00af600db18cb2c04b3ed", "0xd03cc744a2888ae40caa232946c5e7e1",
		"0x00000000000000000000000000000000", "0x13e02b6052719f607dacd3a088274f65", "0x596bd0d09920b61ab5da61bbdc7f5049", "0x334cf11213945d57e5ac7d055d042b7e",
		"0x00000000000000000000000000000000", "0x024aa2b2f08f0a91260805272dc51051", "0xc6e47ad4fa403b02b4510b647ae3d177", "0x0bac0326a805bbefd48056c8c121bdb8",
		"0x00000000000000000000000000000000", "0x0606c4a02ea734cc32acd2b02bc28b99", "0xcb3e287e85a763af267492ab572e99ab", "0x3f370d275cec1da1aaa9075ff05f79be",
		"0x00000000000000000000000000000000", "0x0ce5d527727d6e118cc9cdc6da2e351a", "0xadfd9baa8cbdd3a76d429a695160d12c", "0x923ac9cc3baca289e193548608b82801",
		"0x0", "0x1",
	}
	var res field.Element
	_, err := res.SetString(tbl[inputIndex%nbRowsPerFinalExp])
	if err != nil {
		panic(fmt.Sprintf("failed to set string: %v", err))
	}
	return res
}

func mapToGroupInputFillerKey(g group) string {
	return fmt.Sprintf("bls12381-map-%s-to-%s-input-filler", g.StringMap(), g.String())
}

func inputFillerMapToG1(circuitInstance, inputIndex int) field.Element {
	// map of 0
	tbl := []string{
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0x11a9a0372b8f332d5c30de9ad14e5037",
		"0x2a73fa4c45d5f2fa5097f2d6fb93bcac",
		"0x592f2e1711ac43db0519870c7d0ea415",
		"0x00000000000000000000000000000000",
		"0x092c0f994164a0719f51c24ba3788de2",
		"0x40ff926b55f58c445116e8bc6a47cd63",
		"0x392fd4e8e22bdf9feaa96ee773222133",
	}
	var res field.Element
	_, err := res.SetString(tbl[inputIndex%nbRowsPerG1Map])
	if err != nil {
		panic(fmt.Sprintf("failed to set string: %v", err))
	}
	return res
}

func inputFillerMapToG2(circuitInstance, inputIndex int) field.Element {
	// map of (0, 0)
	tbl := []string{
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0x0a67d12118b5a35bb02d2e86b3ebfa7e",
		"0x23410db93de39fb06d7025fa95e96ffa",
		"0x428a7a27c3ae4dd4b40bd251ac658892",
		"0x00000000000000000000000000000000",
		"0x018320896ec9eef9d5e619848dc29ce2",
		"0x66f413d02dd31d9b9d44ec0c79cd61f1",
		"0x8b075ddba6d7bd20b7ff27a4b324bfce",
		"0x00000000000000000000000000000000",
		"0x04c69777a43f0bda07679d5805e63f18",
		"0xcf4e0e7c6112ac7f70266d199b4f76ae",
		"0x27c6269a3ceebdae30806e9a76aadf5c",
		"0x00000000000000000000000000000000",
		"0x0260e03644d1a2c321256b3246bad2b8",
		"0x95cad13890cbe6f85df55106a0d33460",
		"0x4fb143c7a042d878006271865bc35941",
	}
	var res field.Element
	_, err := res.SetString(tbl[inputIndex%nbRowsPerG2Map])
	if err != nil {
		panic(fmt.Sprintf("failed to set string: %v", err))
	}
	return res
}

func inputFillerPointEvaluation(circuitInstance, inputIndex int) field.Element {
	tbl := []string{
		// versioned hash
		"0xdef7ab966d7b770905398eba3c444014",
		"0x010657f37554c781402a22917dee2f75",
		// evaluation point
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		// claimed value
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		// commitment compressed
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0xc0000000000000000000000000000000",
		// proof compressed
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000000000",
		"0xc0000000000000000000000000000000",
		// expected blob size
		"0x00000000000000000000000000000000",
		"0x00000000000000000000000000001000",
		// expected bls modulus
		"0x73eda753299d7d483339d80809a1d805",
		"0x53bda402fffe5bfeffffffff00000001",
	}
	var res field.Element
	_, err := res.SetString(tbl[inputIndex%nbRowsPerPointEval])
	if err != nil {
		panic(fmt.Sprintf("failed to set string: %v", err))
	}
	return res
}

func inputFillerPointEvaluationFailure(circuitInstance, inputIndex int) field.Element {
	var res field.Element
	return res
}
