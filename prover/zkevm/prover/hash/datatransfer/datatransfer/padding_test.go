package datatransfer

import (
	"testing"

	"github.com/consensys/linea-monorepo/prover/crypto/keccak"
	"github.com/consensys/linea-monorepo/prover/crypto/sha2"
	"github.com/consensys/linea-monorepo/prover/protocol/compiler/dummy"
	"github.com/consensys/linea-monorepo/prover/protocol/wizard"
	"github.com/consensys/linea-monorepo/prover/utils"
	"github.com/consensys/linea-monorepo/prover/zkevm/prover/hash/generic"
	"github.com/stretchr/testify/assert"
)

// It generates Define and Assign function of Padding submodule, for testing
func GetPaddingForTest(hashType int) (
	define wizard.DefineFunc,
	prover wizard.ProverStep,
) {
	round := 0
	gbmSize := 512
	size := 2048
	iPadd := importAndPadd{}
	gbm := generic.GenericByteModule{}
	lu := lookUpTables{}

	def := generic.PHONEY_RLP
	define = func(build *wizard.Builder) {
		comp := build.CompiledIOP
		iPadd.insertCommit(comp, round, size)
		gbm = CommitGBM(comp, round, def, gbmSize)
		lu = newLookupTables(comp)
		if hashType == Keccak {
			iPadd.insertPaddingKeccak(comp, round, lu.colKeccakMaxPadding)
		} else {
			iPadd.insertPaddingSha2(comp, round, lu.colSha2MaxPadding)
		}
	}
	prover = func(run *wizard.ProverRuntime) {
		gt := generic.GenTrace{}
		keccakTrace := keccak.PermTraces{}
		sha2Trace := sha2.HashTraces{}

		AssignGBMfromTable(run, &gbm)
		gbm.AppendTraces(run, &gt, &keccakTrace, &sha2Trace)
		iPadd.assignImportAndPadd(run, gt, size, hashType)

		// check that blocks generated by iPadd are consistence with the trace
		if hashType == Sha2 {
		} else {
			blocks := blocksFromIPadd(run, iPadd, maxBlockSize)
			for j := range blocks {

				if keccakTrace.Blocks[j] != *bytesAsBlockPtrUnsafe(blocks[j]) {
					utils.Panic("%v-th block is not correct", j)

				}

			}
		}

	}
	return define, prover
}

// test Keccak Padding
func TestPaddingKeccak(t *testing.T) {
	define, prover := GetPaddingForTest(0)
	comp := wizard.Compile(define, dummy.Compile)
	proof := wizard.Prove(comp, prover)
	assert.NoErrorf(t, wizard.Verify(comp, proof), "invalid proof for keccak")
}

// test Sha2 Padding
func TestPaddingSha2(t *testing.T) {
	define, prover := GetPaddingForTest(1)
	comp := wizard.Compile(define, dummy.Compile)
	proof := wizard.Prove(comp, prover)
	assert.NoErrorf(t, wizard.Verify(comp, proof), "invalid proof for sha2")
}
