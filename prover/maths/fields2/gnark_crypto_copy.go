// Code generated by typecopy. DO NOT EDIT.

package fields

import (
    "unsafe"
    "math/big"
    "github.com/consensys/gnark-crypto/field/koalabear"
    "github.com/consensys/gnark-crypto/field/koalabear/extensions"
    
)


// Fr is a copy type of [koalabear.Element]
type Fr koalabear.Element

// Ext is a copy type of [extensions.E4]
type Ext extensions.E4



// SetUint64 is an automatically generated wrapper arround [*koalabear.Element.SetUint64]
func (z *Fr) SetUint64(v uint64) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	_r0 := _z.SetUint64(v)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// SetInt64 is an automatically generated wrapper arround [*koalabear.Element.SetInt64]
func (z *Fr) SetInt64(v int64) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	_r0 := _z.SetInt64(v)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// Set is an automatically generated wrapper arround [*koalabear.Element.Set]
func (z *Fr) Set(x *Fr) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))

	_r0 := _z.Set(_x)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// SetInterface is an automatically generated wrapper arround [*koalabear.Element.SetInterface]
func (z *Fr) SetInterface(i1 interface{}) (*Fr, error) {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	_r0, r1 := _z.SetInterface(i1)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0, r1
}


// SetZero is an automatically generated wrapper arround [*koalabear.Element.SetZero]
func (z *Fr) SetZero() *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	_r0 := _z.SetZero()

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// SetOne is an automatically generated wrapper arround [*koalabear.Element.SetOne]
func (z *Fr) SetOne() *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	_r0 := _z.SetOne()

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// Div is an automatically generated wrapper arround [*koalabear.Element.Div]
func (z *Fr) Div(x *Fr, y *Fr) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))
	_y := (*koalabear.Element)(unsafe.Pointer(y))

	_r0 := _z.Div(_x, _y)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// Equal is an automatically generated wrapper arround [*koalabear.Element.Equal]
func (z *Fr) Equal(x *Fr) bool {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))

	r0 := _z.Equal(_x)

	return r0
}


// NotEqual is an automatically generated wrapper arround [*koalabear.Element.NotEqual]
func (z *Fr) NotEqual(x *Fr) uint32 {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))

	r0 := _z.NotEqual(_x)

	return r0
}


// IsZero is an automatically generated wrapper arround [*koalabear.Element.IsZero]
func (z *Fr) IsZero() bool {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.IsZero()

	return r0
}


// IsOne is an automatically generated wrapper arround [*koalabear.Element.IsOne]
func (z *Fr) IsOne() bool {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.IsOne()

	return r0
}


// IsUint64 is an automatically generated wrapper arround [*koalabear.Element.IsUint64]
func (z *Fr) IsUint64() bool {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.IsUint64()

	return r0
}


// Uint64 is an automatically generated wrapper arround [*koalabear.Element.Uint64]
func (z *Fr) Uint64() uint64 {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.Uint64()

	return r0
}


// FitsOnOneWord is an automatically generated wrapper arround [*koalabear.Element.FitsOnOneWord]
func (z *Fr) FitsOnOneWord() bool {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.FitsOnOneWord()

	return r0
}


// Cmp is an automatically generated wrapper arround [*koalabear.Element.Cmp]
func (z *Fr) Cmp(x *Fr) int {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))

	r0 := _z.Cmp(_x)

	return r0
}


// LexicographicallyLargest is an automatically generated wrapper arround [*koalabear.Element.LexicographicallyLargest]
func (z *Fr) LexicographicallyLargest() bool {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.LexicographicallyLargest()

	return r0
}


// SetRandom is an automatically generated wrapper arround [*koalabear.Element.SetRandom]
func (z *Fr) SetRandom() (*Fr, error) {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	_r0, r1 := _z.SetRandom()

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0, r1
}


// MustSetRandom is an automatically generated wrapper arround [*koalabear.Element.MustSetRandom]
func (z *Fr) MustSetRandom() *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	_r0 := _z.MustSetRandom()

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// Halve is an automatically generated wrapper arround [*koalabear.Element.Halve]
func (z *Fr) Halve() {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	_z.Halve()

	return 
}


// Add is an automatically generated wrapper arround [*koalabear.Element.Add]
func (z *Fr) Add(x *Fr, y *Fr) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))
	_y := (*koalabear.Element)(unsafe.Pointer(y))

	_r0 := _z.Add(_x, _y)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// Double is an automatically generated wrapper arround [*koalabear.Element.Double]
func (z *Fr) Double(x *Fr) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))

	_r0 := _z.Double(_x)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// Sub is an automatically generated wrapper arround [*koalabear.Element.Sub]
func (z *Fr) Sub(x *Fr, y *Fr) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))
	_y := (*koalabear.Element)(unsafe.Pointer(y))

	_r0 := _z.Sub(_x, _y)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// Neg is an automatically generated wrapper arround [*koalabear.Element.Neg]
func (z *Fr) Neg(x *Fr) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))

	_r0 := _z.Neg(_x)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// Select is an automatically generated wrapper arround [*koalabear.Element.Select]
func (z *Fr) Select(c int, x0 *Fr, x1 *Fr) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x0 := (*koalabear.Element)(unsafe.Pointer(x0))
	_x1 := (*koalabear.Element)(unsafe.Pointer(x1))

	_r0 := _z.Select(c, _x0, _x1)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// BitLen is an automatically generated wrapper arround [*koalabear.Element.BitLen]
func (z *Fr) BitLen() int {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.BitLen()

	return r0
}


// Exp is an automatically generated wrapper arround [*koalabear.Element.Exp]
func (z *Fr) Exp(x Fr, k *big.Int) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := *(*koalabear.Element)(unsafe.Pointer(&x))

	_r0 := _z.Exp(_x, k)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// String is an automatically generated wrapper arround [*koalabear.Element.String]
func (z *Fr) String() string {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.String()

	return r0
}


// Text is an automatically generated wrapper arround [*koalabear.Element.Text]
func (z *Fr) Text(base int) string {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.Text(base)

	return r0
}


// BigInt is an automatically generated wrapper arround [*koalabear.Element.BigInt]
func (z *Fr) BigInt(res *big.Int) *big.Int {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.BigInt(res)

	return r0
}


// ToBigIntRegular is an automatically generated wrapper arround [koalabear.Element.ToBigIntRegular]
func (z Fr) ToBigIntRegular(res *big.Int) *big.Int {
	// Casting the parameters using unsafe
	_z := *(*koalabear.Element)(unsafe.Pointer(&z))

	r0 := _z.ToBigIntRegular(res)

	return r0
}


// Bits is an automatically generated wrapper arround [*koalabear.Element.Bits]
func (z *Fr) Bits() [1]uint32 {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.Bits()

	return r0
}


// Bytes is an automatically generated wrapper arround [*koalabear.Element.Bytes]
func (z *Fr) Bytes() [4]byte {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.Bytes()

	return r0
}


// Marshal is an automatically generated wrapper arround [*koalabear.Element.Marshal]
func (z *Fr) Marshal() []byte {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.Marshal()

	return r0
}


// Unmarshal is an automatically generated wrapper arround [*koalabear.Element.Unmarshal]
func (z *Fr) Unmarshal(e []byte) {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	_z.Unmarshal(e)

	return 
}


// SetBytes is an automatically generated wrapper arround [*koalabear.Element.SetBytes]
func (z *Fr) SetBytes(e []byte) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	_r0 := _z.SetBytes(e)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// SetBytesCanonical is an automatically generated wrapper arround [*koalabear.Element.SetBytesCanonical]
func (z *Fr) SetBytesCanonical(e []byte) error {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.SetBytesCanonical(e)

	return r0
}


// SetBigInt is an automatically generated wrapper arround [*koalabear.Element.SetBigInt]
func (z *Fr) SetBigInt(v *big.Int) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	_r0 := _z.SetBigInt(v)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// SetString is an automatically generated wrapper arround [*koalabear.Element.SetString]
func (z *Fr) SetString(number string) (*Fr, error) {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	_r0, r1 := _z.SetString(number)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0, r1
}


// MarshalJSON is an automatically generated wrapper arround [*koalabear.Element.MarshalJSON]
func (z *Fr) MarshalJSON() ([]byte, error) {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0, r1 := _z.MarshalJSON()

	return r0, r1
}


// UnmarshalJSON is an automatically generated wrapper arround [*koalabear.Element.UnmarshalJSON]
func (z *Fr) UnmarshalJSON(data []byte) error {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.UnmarshalJSON(data)

	return r0
}


// Legendre is an automatically generated wrapper arround [*koalabear.Element.Legendre]
func (z *Fr) Legendre() int {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))

	r0 := _z.Legendre()

	return r0
}


// Sqrt is an automatically generated wrapper arround [*koalabear.Element.Sqrt]
func (z *Fr) Sqrt(x *Fr) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))

	_r0 := _z.Sqrt(_x)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// Inverse is an automatically generated wrapper arround [*koalabear.Element.Inverse]
func (z *Fr) Inverse(x *Fr) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))

	_r0 := _z.Inverse(_x)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// Mul2ExpNegN is an automatically generated wrapper arround [*koalabear.Element.Mul2ExpNegN]
func (z *Fr) Mul2ExpNegN(x *Fr, n uint32) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))

	_r0 := _z.Mul2ExpNegN(_x, n)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// Mul is an automatically generated wrapper arround [*koalabear.Element.Mul]
func (z *Fr) Mul(x *Fr, y *Fr) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))
	_y := (*koalabear.Element)(unsafe.Pointer(y))

	_r0 := _z.Mul(_x, _y)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// Square is an automatically generated wrapper arround [*koalabear.Element.Square]
func (z *Fr) Square(x *Fr) *Fr {
	// Casting the parameters using unsafe
	_z := (*koalabear.Element)(unsafe.Pointer(z))
	_x := (*koalabear.Element)(unsafe.Pointer(x))

	_r0 := _z.Square(_x)

	// Casting the results using unsafe
	r0 := (*Fr)(unsafe.Pointer(_r0))
	return r0
}


// Equal is an automatically generated wrapper arround [*extensions.E4.Equal]
func (z *Ext) Equal(x *Ext) bool {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))

	r0 := _z.Equal(_x)

	return r0
}


// Cmp is an automatically generated wrapper arround [*extensions.E4.Cmp]
func (z *Ext) Cmp(x *Ext) int {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))

	r0 := _z.Cmp(_x)

	return r0
}


// LexicographicallyLargest is an automatically generated wrapper arround [*extensions.E4.LexicographicallyLargest]
func (z *Ext) LexicographicallyLargest() bool {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))

	r0 := _z.LexicographicallyLargest()

	return r0
}


// String is an automatically generated wrapper arround [*extensions.E4.String]
func (z *Ext) String() string {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))

	r0 := _z.String()

	return r0
}


// SetString is an automatically generated wrapper arround [*extensions.E4.SetString]
func (z *Ext) SetString(s0 string, s1 string, s2 string, s3 string) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))

	_r0 := _z.SetString(s0, s1, s2, s3)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// Set is an automatically generated wrapper arround [*extensions.E4.Set]
func (z *Ext) Set(x *Ext) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))

	_r0 := _z.Set(_x)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// SetZero is an automatically generated wrapper arround [*extensions.E4.SetZero]
func (z *Ext) SetZero() *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))

	_r0 := _z.SetZero()

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// SetOne is an automatically generated wrapper arround [*extensions.E4.SetOne]
func (z *Ext) SetOne() *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))

	_r0 := _z.SetOne()

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// MulByElement is an automatically generated wrapper arround [*extensions.E4.MulByElement]
func (z *Ext) MulByElement(x *Ext, y *Fr) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))
	_y := (*koalabear.Element)(unsafe.Pointer(y))

	_r0 := _z.MulByElement(_x, _y)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// MulByE2 is an automatically generated wrapper arround [*extensions.E4.MulByE2]
func (z *Ext) MulByE2(x *Ext, y *extensions.E2) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))

	_r0 := _z.MulByE2(_x, y)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// Add is an automatically generated wrapper arround [*extensions.E4.Add]
func (z *Ext) Add(x *Ext, y *Ext) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))
	_y := (*extensions.E4)(unsafe.Pointer(y))

	_r0 := _z.Add(_x, _y)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// Sub is an automatically generated wrapper arround [*extensions.E4.Sub]
func (z *Ext) Sub(x *Ext, y *Ext) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))
	_y := (*extensions.E4)(unsafe.Pointer(y))

	_r0 := _z.Sub(_x, _y)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// Double is an automatically generated wrapper arround [*extensions.E4.Double]
func (z *Ext) Double(x *Ext) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))

	_r0 := _z.Double(_x)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// Neg is an automatically generated wrapper arround [*extensions.E4.Neg]
func (z *Ext) Neg(x *Ext) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))

	_r0 := _z.Neg(_x)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// SetRandom is an automatically generated wrapper arround [*extensions.E4.SetRandom]
func (z *Ext) SetRandom() (*Ext, error) {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))

	_r0, r1 := _z.SetRandom()

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0, r1
}


// MustSetRandom is an automatically generated wrapper arround [*extensions.E4.MustSetRandom]
func (z *Ext) MustSetRandom() *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))

	_r0 := _z.MustSetRandom()

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// IsZero is an automatically generated wrapper arround [*extensions.E4.IsZero]
func (z *Ext) IsZero() bool {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))

	r0 := _z.IsZero()

	return r0
}


// IsOne is an automatically generated wrapper arround [*extensions.E4.IsOne]
func (z *Ext) IsOne() bool {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))

	r0 := _z.IsOne()

	return r0
}


// MulByNonResidue is an automatically generated wrapper arround [*extensions.E4.MulByNonResidue]
func (z *Ext) MulByNonResidue(x *Ext) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))

	_r0 := _z.MulByNonResidue(_x)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// Mul is an automatically generated wrapper arround [*extensions.E4.Mul]
func (z *Ext) Mul(x *Ext, y *Ext) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))
	_y := (*extensions.E4)(unsafe.Pointer(y))

	_r0 := _z.Mul(_x, _y)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// Square is an automatically generated wrapper arround [*extensions.E4.Square]
func (z *Ext) Square(x *Ext) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))

	_r0 := _z.Square(_x)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// Inverse is an automatically generated wrapper arround [*extensions.E4.Inverse]
func (z *Ext) Inverse(x *Ext) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))

	_r0 := _z.Inverse(_x)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// Exp is an automatically generated wrapper arround [*extensions.E4.Exp]
func (z *Ext) Exp(x Ext, k *big.Int) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := *(*extensions.E4)(unsafe.Pointer(&x))

	_r0 := _z.Exp(_x, k)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// Conjugate is an automatically generated wrapper arround [*extensions.E4.Conjugate]
func (z *Ext) Conjugate(x *Ext) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))

	_r0 := _z.Conjugate(_x)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// Halve is an automatically generated wrapper arround [*extensions.E4.Halve]
func (z *Ext) Halve() {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))

	_z.Halve()

	return 
}


// Legendre is an automatically generated wrapper arround [*extensions.E4.Legendre]
func (z *Ext) Legendre() int {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))

	r0 := _z.Legendre()

	return r0
}


// Sqrt is an automatically generated wrapper arround [*extensions.E4.Sqrt]
func (z *Ext) Sqrt(x *Ext) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))

	_r0 := _z.Sqrt(_x)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


// Div is an automatically generated wrapper arround [*extensions.E4.Div]
func (z *Ext) Div(x *Ext, y *Ext) *Ext {
	// Casting the parameters using unsafe
	_z := (*extensions.E4)(unsafe.Pointer(z))
	_x := (*extensions.E4)(unsafe.Pointer(x))
	_y := (*extensions.E4)(unsafe.Pointer(y))

	_r0 := _z.Div(_x, _y)

	// Casting the results using unsafe
	r0 := (*Ext)(unsafe.Pointer(_r0))
	return r0
}


