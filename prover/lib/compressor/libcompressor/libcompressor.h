/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "libcompressor.go"


#include <jni.h>
#include <stdlib.h>

inline jint GetArrayLength(JNIEnv *env, jbyteArray array) {
    return (*env)->GetArrayLength(env, array);
}

inline jbyte* GetByteArrayElements(JNIEnv *env, jbyteArray array, jboolean *isCopy) {
    return (*env)->GetByteArrayElements(env, array, isCopy);
}

inline jclass FindClass(JNIEnv *env, const char *name) {
    return (*env)->FindClass(env, name);
}

inline void ThrowNew(JNIEnv *env, jclass clazz, const char *message) {
    (*env)->ThrowNew(env, clazz, message);
}

inline jbyteArray NewByteArray(JNIEnv *env, jsize length) {
    return (*env)->NewByteArray(env, length);
}

inline void SetByteArrayRegion(JNIEnv *env, jbyteArray array, jsize start, jsize len, const jbyte *buf) {
    (*env)->SetByteArrayRegion(env, array, start, len, buf);
}

inline void ReleaseByteArrayElements(JNIEnv *env, jbyteArray array, jbyte *elements, jint mode) {
    (*env)->ReleaseByteArrayElements(env, array, elements, mode);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// NewInstance initializes the compressor.
// The dataLimit argument is the maximum size of the compressed data.
// Returns the instance ID if successful, or -1 if an error occurred.
//
extern int NewInstance(JNIEnv* env, int dataLimit, char* dictPath);

// Reset resets the compressor. Must be called between blobs.
//
extern void Reset(JNIEnv* env, int instanceID);

// Write appends the input to the compressed data.
// The Go code doesn't keep a pointer to the input slice and the caller is free to modify it.
// Returns true if the chunk was appended, false if the chunk was discarded.
//
// The input []byte is interpreted as a RLP encoded Block.
//
extern GoUint8 Write(JNIEnv* env, int instanceID, jbyteArray rlpBlock);

// CanWrite behaves as Write, except that it doesn't append the input to the compressed data
// (but return true if it could)
//
extern GoUint8 CanWrite(JNIEnv* env, int instanceID, jbyteArray rlpBlock);

// StartNewBatch starts a new batch; must be called between each batch in the blob.
//
extern void StartNewBatch(JNIEnv* env, int instanceID);

// Len returns the length of the compressed data.
//
extern int Len(JNIEnv* env, int instanceID);

// Bytes returns the compressed data.
//
extern jbyteArray Bytes(JNIEnv* env, int instanceID);

// WorstCompressedBlockSize returns the size of the given block, as compressed by an "empty" blob maker.
// That is, with more context, blob maker could compress the block further, but this function
// returns the maximum size that can be achieved.
//
// The input is a RLP encoded block.
//
extern int WorstCompressedBlockSize(JNIEnv* env, int instanceID, jbyteArray rlpBlock);

// WorstCompressedTxSize returns the size of the given transaction, as compressed by an "empty" blob maker.
// That is, with more context, blob maker could compress the transaction further, but this function
// returns the maximum size that can be achieved.
//
// The input is a RLP encoded transaction.
//
extern int WorstCompressedTxSize(JNIEnv* env, int instanceID, jbyteArray rlpTx);

// RawCompressedSize compresses the (raw) input and returns the length of the compressed data.
// The returned length account for the "padding" used by the blob maker to
// fit the data in field elements.
// Input size must be less than 256kB.
//
extern int RawCompressedSize(JNIEnv* env, int instanceID, jbyteArray input);

#ifdef __cplusplus
}
#endif
