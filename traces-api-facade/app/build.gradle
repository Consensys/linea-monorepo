plugins {
  id 'net.consensys.zkevm.kotlin-application-conventions'
  id 'com.github.johnrengelman.shadow' version '7.1.2'
}

dependencies {
  implementation project(':traces-api-facade:conflation')
  implementation project(':traces-api-facade:core')
  implementation project(':jvm-libs:generic:json-rpc')
  implementation project(':jvm-libs:linea:metrics:micrometer')
  implementation project(':jvm-libs:generic:extensions:kotlin')
  implementation project(':jvm-libs:generic:extensions:futures')
  implementation project(':jvm-libs:generic:vertx-helper')

  implementation "com.github.ben-manes.caffeine:caffeine:${libs.versions.caffeine.get()}"
  implementation "io.vertx:vertx-core"
  implementation "io.vertx:vertx-web"
  implementation "io.vertx:vertx-health-check"
  implementation "io.vertx:vertx-lang-kotlin"
  implementation "io.vertx:vertx-config"
  implementation "io.vertx:vertx-micrometer-metrics"
  implementation "io.tmio:tuweni-units:${libs.versions.tuweni.get()}"
  implementation "info.picocli:picocli:${libs.versions.picoli.get()}"
  implementation "com.sksamuel.hoplite:hoplite-core:${libs.versions.hoplite.get()}"
  implementation "com.sksamuel.hoplite:hoplite-toml:${libs.versions.hoplite.get()}"
  implementation "io.micrometer:micrometer-registry-prometheus:${libs.versions.micrometer.get()}"
  implementation "com.fasterxml.jackson.core:jackson-annotations:${libs.versions.jackson.get()}"
  implementation "com.fasterxml.jackson.core:jackson-databind:${libs.versions.jackson.get()}"
  implementation "com.fasterxml.jackson.module:jackson-module-kotlin:${libs.versions.jackson.get()}"
  api("io.netty:netty-transport-native-epoll:${libs.versions.netty.get()}:linux-x86_64") {
    because "It enables native transport for Linux."
    // Note that its version should match netty version used in Vertx
  }
  api("io.netty:netty-transport-native-kqueue:${libs.versions.netty.get()}:osx-x86_64") {
    because "It enables native transport for Mac OSX."
    // Note that its version should match netty version used in Vertx
  }

  testImplementation "io.vertx:vertx-junit5"
  testImplementation "io.rest-assured:rest-assured:${libs.versions.restassured.get()}"
  testImplementation "io.rest-assured:json-schema-validator:${libs.versions.restassured.get()}"
}

application {
  mainClass = 'net.consensys.linea.traces.app.TracesAppMain'
}

jar {
  manifest {
    attributes(
        'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.findAll {it.endsWith('jar') }.join(' '),
        'Main-Class': 'net.consensys.linea.traces.app.TracesAppMain',
        'Multi-Release': 'true'
        )
  }
}

run {
  workingDir = rootProject.projectDir
  jvmArgs = [
    "-Dvertx.configurationFile=config/traces-api/vertx.json",
    "-Dlog4j2.configurationFile=config/traces-api/log4j2-dev.xml"
  ] + System.properties.entrySet()
  .findAll { it.key.startsWith("config") }
  .collect { "-D${it.key}=${it.value}" }
  args = [
    "config/traces-api/traces-app-docker.config.toml",
    "config/traces-api/traces-app-local-dev.config.overrides.toml"
  ]
}

test {
  systemProperty "vertx.configurationFile", "vertx-options.json"
}
