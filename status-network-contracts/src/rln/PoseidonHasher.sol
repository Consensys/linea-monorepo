// SPDX-License-Identifier: MIT
pragma solidity 0.8.26;

interface IPoseidonHasher {
    function hash(uint256 input) external pure returns (uint256 result);

    function identity() external pure returns (uint256);
}

contract PoseidonHasher is IPoseidonHasher {
    uint256 constant Q =
        21_888_242_871_839_275_222_246_405_745_257_275_088_548_364_400_416_034_343_698_204_186_575_808_495_617;
    uint256 constant C0 =
        4_417_881_134_626_180_770_308_697_923_359_573_201_005_643_519_861_877_412_381_846_989_312_604_493_735;
    uint256 constant C1 =
        5_433_650_512_959_517_612_316_327_474_713_065_966_758_808_864_213_826_738_576_266_661_723_522_780_033;
    uint256 constant C2 =
        13_641_176_377_184_356_099_764_086_973_022_553_863_760_045_607_496_549_923_679_278_773_208_775_739_952;
    uint256 constant C3 =
        17_949_713_444_224_994_136_330_421_782_109_149_544_629_237_834_775_211_751_417_461_773_584_374_506_783;
    uint256 constant C4 =
        13_765_628_375_339_178_273_710_281_891_027_109_699_578_766_420_463_125_835_325_926_111_705_201_856_003;
    uint256 constant C5 =
        19_179_513_468_172_002_314_585_757_290_678_967_643_352_171_735_526_887_944_518_845_346_318_719_730_387;
    uint256 constant C6 =
        5_157_412_437_176_756_884_543_472_904_098_424_903_141_745_259_452_875_378_101_256_928_559_722_612_176;
    uint256 constant C7 =
        535_160_875_740_282_236_955_320_458_485_730_000_677_124_519_901_643_397_458_212_725_410_971_557_409;
    uint256 constant C8 =
        1_050_793_453_380_762_984_940_163_090_920_066_886_770_841_063_557_081_906_093_018_330_633_089_036_729;
    uint256 constant C9 =
        10_665_495_010_329_663_932_664_894_101_216_428_400_933_984_666_065_399_374_198_502_106_997_623_173_873;
    uint256 constant C10 =
        19_965_634_623_406_616_956_648_724_894_636_666_805_991_993_496_469_370_618_546_874_926_025_059_150_737;
    uint256 constant C11 =
        13_007_250_030_070_838_431_593_222_885_902_415_182_312_449_212_965_120_303_174_723_305_710_127_422_213;
    uint256 constant C12 =
        16_877_538_715_074_991_604_507_979_123_743_768_693_428_157_847_423_939_051_086_744_213_162_455_276_374;
    uint256 constant C13 =
        18_211_747_749_504_876_135_588_847_560_312_685_184_956_239_426_147_543_810_126_553_367_063_157_141_465;
    uint256 constant C14 =
        18_151_553_319_826_126_919_739_798_892_854_572_062_191_241_985_315_767_086_020_821_632_812_331_245_635;
    uint256 constant C15 =
        19_957_033_149_976_712_666_746_140_949_846_950_406_660_099_037_474_791_840_946_955_175_819_555_930_825;
    uint256 constant C16 =
        3_469_514_863_538_261_843_186_854_830_917_934_449_567_467_100_548_474_599_735_384_052_339_577_040_841;
    uint256 constant C17 =
        989_698_510_043_911_779_243_192_466_312_362_856_042_600_749_099_921_773_896_924_315_611_668_507_708;
    uint256 constant C18 =
        12_568_377_015_646_290_945_235_387_813_564_567_111_330_046_038_050_864_455_358_059_568_128_000_172_201;
    uint256 constant C19 =
        20_856_104_135_605_479_600_325_529_349_246_932_565_148_587_186_338_606_236_677_138_505_306_779_314_172;
    uint256 constant C20 =
        8_206_918_720_503_535_523_121_349_917_159_924_938_835_810_381_723_474_192_155_637_697_065_780_938_424;
    uint256 constant C21 =
        1_309_058_477_013_932_989_380_617_265_069_188_723_120_054_926_187_607_548_493_110_334_522_527_703_566;
    uint256 constant C22 =
        14_076_116_939_332_667_074_621_703_729_512_195_584_105_250_395_163_383_769_419_390_236_426_287_710_606;
    uint256 constant C23 =
        10_153_498_892_749_751_942_204_288_991_871_286_290_442_690_932_856_658_983_589_258_153_608_012_428_674;
    uint256 constant C24 =
        18_202_499_207_234_128_286_137_597_834_010_475_797_175_973_146_805_180_988_367_589_376_893_530_181_575;
    uint256 constant C25 =
        12_739_388_830_157_083_522_877_690_211_447_248_168_864_006_284_243_907_142_044_329_113_461_613_743_052;
    uint256 constant C26 =
        15_123_358_710_467_780_770_838_026_754_240_340_042_441_262_572_309_759_635_224_051_333_176_022_613_949;
    uint256 constant C27 =
        19_925_004_701_844_594_370_904_593_774_447_343_836_015_483_888_496_504_201_331_110_250_494_635_362_184;
    uint256 constant C28 =
        10_352_416_606_816_998_476_681_131_583_320_899_030_072_315_953_910_679_608_943_150_613_208_329_645_891;
    uint256 constant C29 =
        10_567_371_822_366_244_361_703_342_347_428_230_537_114_808_440_249_611_395_507_235_283_708_966_113_221;
    uint256 constant C30 =
        5_635_498_582_763_880_627_392_290_206_431_559_361_272_660_937_399_944_184_533_035_305_989_295_959_602;
    uint256 constant C31 =
        11_866_432_933_224_219_174_041_051_738_704_352_719_163_271_639_958_083_608_224_676_028_593_315_904_909;
    uint256 constant C32 =
        5_795_020_705_294_401_441_272_215_064_554_385_591_292_330_721_703_923_167_136_157_291_459_784_140_431;
    uint256 constant C33 =
        9_482_202_378_699_252_817_564_375_087_302_794_636_287_866_584_767_523_335_624_368_774_856_230_692_758;
    uint256 constant C34 =
        4_245_237_636_894_546_151_746_468_406_560_945_873_445_548_423_466_753_843_402_086_544_922_216_329_298;
    uint256 constant C35 =
        12_000_500_941_313_982_757_584_712_677_991_730_019_124_834_399_479_314_697_467_598_397_927_435_905_133;
    uint256 constant C36 =
        7_596_790_274_058_425_558_167_520_209_857_956_363_736_666_939_016_807_569_082_239_187_494_363_541_787;
    uint256 constant C37 =
        2_484_867_918_246_116_343_205_467_273_440_098_378_820_186_751_202_461_278_013_576_281_097_918_148_877;
    uint256 constant C38 =
        18_312_645_949_449_997_391_810_445_935_615_409_295_369_169_383_463_185_688_973_803_378_104_013_950_190;
    uint256 constant C39 =
        15_320_686_572_748_723_004_980_855_263_301_182_130_424_010_735_782_762_814_513_954_166_519_592_552_733;
    uint256 constant C40 =
        12_618_438_900_597_948_888_520_621_062_416_758_747_872_180_395_546_164_387_827_245_287_017_031_303_859;
    uint256 constant C41 =
        17_438_141_672_027_706_116_733_201_008_397_064_011_774_368_832_458_707_512_367_404_736_905_021_019_585;
    uint256 constant C42 =
        6_374_197_807_230_665_998_865_688_675_365_359_100_400_438_034_755_781_666_913_068_586_172_586_548_950;
    uint256 constant C43 =
        2_189_398_913_433_273_865_510_950_346_186_699_930_188_746_169_476_472_274_335_177_556_702_504_595_264;
    uint256 constant C44 =
        6_268_495_580_028_970_231_803_791_523_870_131_137_294_646_402_347_399_003_576_649_137_450_213_034_606;
    uint256 constant C45 =
        17_896_250_365_994_900_261_202_920_044_129_628_104_272_791_547_990_619_503_076_839_618_914_047_059_275;
    uint256 constant C46 =
        13_692_156_312_448_722_528_008_862_371_944_543_449_350_293_305_158_722_920_787_736_248_435_893_008_873;
    uint256 constant C47 =
        15_234_446_864_368_744_483_209_945_022_439_268_713_300_180_233_589_581_910_497_691_316_744_177_619_376;
    uint256 constant C48 =
        1_572_426_502_623_310_766_593_681_563_281_600_503_979_671_244_997_798_691_029_595_521_622_402_217_227;
    uint256 constant C49 =
        80_103_447_810_215_150_918_585_162_168_214_870_083_573_048_458_555_897_999_822_831_203_653_996_617;
    uint256 constant C50 =
        8_228_820_324_013_669_567_851_850_635_126_713_973_797_711_779_951_230_446_503_353_812_192_849_106_342;
    uint256 constant C51 =
        5_375_851_433_746_509_614_045_812_476_958_526_065_449_377_558_695_752_132_494_533_666_370_449_415_873;
    uint256 constant C52 =
        12_115_998_939_203_497_346_386_774_317_892_338_270_561_208_357_481_805_380_546_938_146_796_257_365_018;
    uint256 constant C53 =
        9_764_067_909_645_821_279_940_531_410_531_154_041_386_008_396_840_887_338_272_986_634_350_423_466_622;
    uint256 constant C54 =
        8_538_708_244_538_850_542_384_936_174_629_541_085_495_830_544_298_260_335_345_008_245_230_827_876_882;
    uint256 constant C55 =
        7_140_127_896_620_013_355_910_287_215_441_004_676_619_168_261_422_440_177_712_039_790_284_719_613_114;
    uint256 constant C56 =
        14_297_402_962_228_458_726_038_826_185_823_085_337_698_917_275_385_741_292_940_049_024_977_027_409_762;
    uint256 constant C57 =
        6_667_115_556_431_351_074_165_934_212_337_261_254_608_231_545_257_434_281_887_966_406_956_835_140_819;
    uint256 constant C58 =
        20_226_761_165_244_293_291_042_617_464_655_196_752_671_169_026_542_832_236_139_342_122_602_741_090_001;
    uint256 constant C59 =
        12_038_289_506_489_256_655_759_141_386_763_477_208_196_694_421_666_339_040_483_042_079_632_134_429_119;
    uint256 constant C60 =
        19_027_757_334_170_818_571_203_982_241_812_412_991_528_769_934_917_288_000_224_335_655_934_473_717_551;
    uint256 constant C61 =
        16_272_152_964_456_553_579_565_580_463_468_069_884_359_929_612_321_610_357_528_838_696_790_370_074_720;
    uint256 constant C62 =
        2_500_392_889_689_246_014_710_135_696_485_946_334_448_570_271_481_948_765_283_016_105_301_740_284_071;
    uint256 constant C63 =
        8_595_254_970_528_530_312_401_637_448_610_398_388_203_855_633_951_264_114_100_575_485_022_581_946_023;
    uint256 constant C64 =
        11_635_945_688_914_011_450_976_408_058_407_206_367_914_559_009_113_158_286_982_919_675_551_688_078_198;
    uint256 constant C65 =
        614_739_068_603_482_619_581_328_040_478_536_306_925_147_663_946_742_687_395_148_680_260_956_671_871;
    uint256 constant C66 =
        18_692_271_780_377_861_570_175_282_183_255_720_350_972_693_125_537_599_213_951_106_550_953_176_268_753;
    uint256 constant C67 =
        4_987_059_230_784_976_306_647_166_378_298_632_695_585_915_319_042_844_495_357_753_339_378_260_807_164;
    uint256 constant C68 =
        21_851_403_978_498_723_616_722_415_377_430_107_676_258_664_746_210_815_234_490_134_600_998_983_955_497;
    uint256 constant C69 =
        9_830_635_451_186_415_300_891_533_983_087_800_047_564_037_813_328_875_992_115_573_428_596_207_326_204;
    uint256 constant C70 =
        4_842_706_106_434_537_116_860_242_620_706_030_229_206_345_167_233_200_482_994_958_847_436_425_185_478;
    uint256 constant C71 =
        6_422_235_064_906_823_218_421_386_871_122_109_085_799_298_052_314_922_856_340_127_798_647_926_126_490;
    uint256 constant C72 =
        4_564_364_104_986_856_861_943_331_689_105_797_031_330_091_877_115_997_069_096_365_671_501_473_357_846;
    uint256 constant C73 =
        1_944_043_894_089_780_613_038_197_112_872_830_569_538_541_856_657_037_469_098_448_708_685_350_671_343;
    uint256 constant C74 =
        21_179_865_974_855_950_600_518_216_085_229_498_748_425_990_426_231_530_451_599_322_283_119_880_194_955;
    uint256 constant C75 =
        14_296_697_761_894_107_574_369_608_843_560_006_996_183_955_751_502_547_883_167_824_879_840_894_933_162;
    uint256 constant C76 =
        12_274_619_649_702_218_570_450_581_712_439_138_337_725_246_879_938_860_735_460_378_251_639_845_671_898;
    uint256 constant C77 =
        16_371_396_450_276_899_401_411_886_674_029_075_408_418_848_209_575_273_031_725_505_038_938_314_070_356;
    uint256 constant C78 =
        3_702_561_221_750_983_937_578_095_019_779_188_631_407_216_522_704_543_451_228_773_892_695_044_653_565;
    uint256 constant C79 =
        19_721_616_877_735_564_664_624_984_774_636_557_499_099_875_603_996_426_215_495_516_594_530_838_681_980;
    uint256 constant C80 =
        6_383_350_109_027_696_789_969_911_008_057_747_025_018_308_755_462_287_526_819_231_672_217_685_282_429;
    uint256 constant C81 =
        20_860_583_956_177_367_265_984_596_617_324_237_471_765_572_961_978_977_333_122_281_041_544_719_622_905;
    uint256 constant C82 =
        5_766_390_934_595_026_947_545_001_478_457_407_504_285_452_477_687_752_470_140_790_011_329_357_286_275;
    uint256 constant C83 =
        4_043_175_758_319_898_049_344_746_138_515_323_336_207_420_888_499_903_387_536_875_603_879_441_092_484;
    uint256 constant C84 =
        15_579_382_179_133_608_217_098_622_223_834_161_692_266_188_678_101_563_820_988_612_253_342_538_956_534;
    uint256 constant C85 =
        1_864_640_783_252_634_743_892_105_383_926_602_930_909_039_567_065_240_010_338_908_865_509_831_749_824;
    uint256 constant C86 =
        15_943_719_865_023_133_586_707_144_161_652_035_291_705_809_358_178_262_514_871_056_013_754_142_625_673;
    uint256 constant C87 =
        2_326_415_993_032_390_211_558_498_780_803_238_091_925_402_878_871_059_708_106_213_703_504_162_832_999;
    uint256 constant C88 =
        19_995_326_402_773_833_553_207_196_590_622_808_505_547_443_523_750_970_375_738_981_396_588_337_910_289;
    uint256 constant C89 =
        5_143_583_711_361_588_952_673_350_526_320_181_330_406_047_695_593_201_009_385_718_506_918_735_286_622;
    uint256 constant C90 =
        15_436_006_486_881_920_976_813_738_625_999_473_183_944_244_531_070_780_793_506_388_892_313_517_319_583;
    uint256 constant C91 =
        16_660_446_760_173_633_166_698_660_166_238_066_533_278_664_023_818_938_868_110_282_615_200_613_695_857;
    uint256 constant C92 =
        4_966_065_365_695_755_376_133_119_391_352_131_079_892_396_024_584_848_298_231_004_326_013_366_253_934;
    uint256 constant C93 =
        20_683_781_957_411_705_574_951_987_677_641_476_019_618_457_561_419_278_856_689_645_563_561_076_926_702;
    uint256 constant C94 =
        17_280_836_839_165_902_792_086_432_296_371_645_107_551_519_324_565_649_849_400_948_918_605_456_875_699;
    uint256 constant C95 =
        17_045_635_513_701_208_892_073_056_357_048_619_435_743_564_064_921_155_892_004_135_325_530_808_465_371;
    uint256 constant C96 =
        17_055_032_967_194_400_710_390_142_791_334_572_297_458_033_582_458_169_295_920_670_679_093_585_707_295;
    uint256 constant C97 =
        15_727_174_639_569_115_300_068_198_908_071_514_334_002_742_825_679_221_638_729_902_577_962_862_163_505;
    uint256 constant C98 =
        1_001_755_657_610_446_661_315_902_885_492_677_747_789_366_510_875_120_894_840_818_704_741_370_398_633;
    uint256 constant C99 =
        18_638_547_332_826_171_619_311_285_502_376_343_504_539_399_518_545_103_511_265_465_604_926_625_041_234;
    uint256 constant C100 =
        6_751_954_224_763_196_429_755_298_529_194_402_870_632_445_298_969_935_050_224_267_844_020_826_420_799;
    uint256 constant C101 =
        3_526_747_115_904_224_771_452_549_517_614_107_688_674_036_840_088_422_555_827_581_348_280_834_879_405;
    uint256 constant C102 =
        15_705_897_908_180_497_062_880_001_271_426_561_999_724_005_008_972_544_196_300_715_293_701_537_574_122;
    uint256 constant C103 =
        574_386_695_213_920_937_259_007_343_820_417_029_802_510_752_426_579_750_428_758_189_312_416_867_750;
    uint256 constant C104 =
        15_973_040_855_000_600_860_816_974_646_787_367_136_127_946_402_908_768_408_978_806_375_685_439_868_553;
    uint256 constant C105 =
        20_934_130_413_948_796_333_037_139_460_875_996_342_810_005_558_806_621_330_680_156_931_816_867_321_122;
    uint256 constant C106 =
        6_918_585_327_145_564_636_398_173_845_411_579_411_526_758_237_572_034_236_476_079_610_890_705_810_764;
    uint256 constant C107 =
        14_158_163_500_813_182_062_258_176_233_162_498_241_310_167_509_137_716_527_054_939_926_126_453_647_182;
    uint256 constant C108 =
        4_164_602_626_597_695_668_474_100_217_150_111_342_272_610_479_949_122_406_544_277_384_862_187_287_433;
    uint256 constant C109 =
        12_146_526_846_507_496_913_615_390_662_823_936_206_892_812_880_963_914_267_275_606_265_272_996_025_304;
    uint256 constant C110 =
        10_153_527_926_900_017_763_244_212_043_512_822_363_696_541_810_586_522_108_597_162_891_799_345_289_938;
    uint256 constant C111 =
        13_564_663_485_965_299_104_296_214_940_873_270_349_072_051_793_008_946_663_855_767_889_066_202_733_588;
    uint256 constant C112 =
        5_612_449_256_997_576_125_867_742_696_783_020_582_952_387_615_430_650_198_777_254_717_398_552_960_096;
    uint256 constant C113 =
        12_151_885_480_032_032_868_507_892_738_683_067_544_172_874_895_736_290_365_318_623_681_886_999_930_120;
    uint256 constant C114 =
        380_452_237_704_664_384_810_613_424_095_477_896_605_414_037_288_009_963_200_982_915_188_629_772_177;
    uint256 constant C115 =
        9_067_557_551_252_570_188_533_509_616_805_287_919_563_636_482_030_947_363_841_198_066_124_642_069_518;
    uint256 constant C116 =
        21_280_306_817_619_711_661_335_268_484_199_763_923_870_315_733_198_162_896_599_997_188_206_277_056_900;
    uint256 constant C117 =
        5_567_165_819_557_297_006_750_252_582_140_767_993_422_097_822_227_408_837_378_089_569_369_734_876_257;
    uint256 constant C118 =
        10_411_936_321_072_105_429_908_396_649_383_171_465_939_606_386_380_071_222_095_155_850_987_201_580_137;
    uint256 constant C119 =
        21_338_390_051_413_922_944_780_864_872_652_000_187_403_217_966_653_363_270_851_298_678_606_449_622_266;
    uint256 constant C120 =
        12_156_296_560_457_833_712_186_127_325_312_904_760_045_212_412_680_904_475_497_938_949_653_569_234_473;
    uint256 constant C121 =
        4_271_647_814_574_748_734_312_113_971_565_139_132_510_281_260_328_947_438_246_615_707_172_526_380_757;
    uint256 constant C122 =
        9_061_738_206_062_369_647_211_128_232_833_114_177_054_715_885_442_782_773_131_292_534_862_178_874_950;
    uint256 constant C123 =
        10_134_551_893_627_587_797_380_445_583_959_894_183_158_393_780_166_496_661_696_555_422_178_052_339_133;
    uint256 constant C124 =
        8_932_270_237_664_043_612_366_044_102_088_319_242_789_325_050_842_783_721_780_970_129_656_616_386_103;
    uint256 constant C125 =
        3_339_412_934_966_886_386_194_449_782_756_711_637_636_784_424_032_779_155_216_609_410_591_712_750_636;
    uint256 constant C126 =
        9_704_903_972_004_596_791_086_522_314_847_373_103_670_545_861_209_569_267_884_026_709_445_485_704_400;
    uint256 constant C127 =
        17_467_570_179_597_572_575_614_276_429_760_169_990_940_929_887_711_661_192_333_523_245_667_228_809_456;
    uint256 constant M00 =
        2_910_766_817_845_651_019_878_574_839_501_801_340_070_030_115_151_021_261_302_834_310_722_729_507_541;
    uint256 constant M01 =
        19_727_366_863_391_167_538_122_140_361_473_584_127_147_630_672_623_100_827_934_084_310_230_022_599_144;
    uint256 constant M10 =
        5_776_684_794_125_549_462_448_597_414_050_232_243_778_680_302_179_439_492_664_047_328_281_728_356_345;
    uint256 constant M11 =
        8_348_174_920_934_122_550_483_593_999_453_880_006_756_108_121_341_067_172_388_445_916_328_941_978_568;

    function hash(uint256 input) external pure override returns (uint256 result) {
        return _hash(input);
    }

    function _hash(uint256 input) internal pure returns (uint256 result) {
        assembly {
            // Poseidon parameters should be t = 2, RF = 8, RP = 56

            // We load the characteristic
            let q := Q

            // In zerokit implementation, if we pass inp = [a0,a1,..,an] to Poseidon what is effectively hashed is
            // [0,a0,a1,..,an]
            // Note that a sequence of MIX-ARK involves 3 Bn254 field additions before the mulmod happens. Worst case
            // we have a value corresponding to 2*(p-1) which is less than 2^256 and hence doesn't overflow
            //ROUND 0 - FULL
            let s0 := C0
            let s1 := add(input, C1)
            // SBOX
            let t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            t := mulmod(s1, s1, q)
            s1 := mulmod(mulmod(t, t, q), s1, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 1 - FULL
            s0 := add(s0, C2)
            s1 := add(s1, C3)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            t := mulmod(s1, s1, q)
            s1 := mulmod(mulmod(t, t, q), s1, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 2 - FULL
            s0 := add(s0, C4)
            s1 := add(s1, C5)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            t := mulmod(s1, s1, q)
            s1 := mulmod(mulmod(t, t, q), s1, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 3 - FULL
            s0 := add(s0, C6)
            s1 := add(s1, C7)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            t := mulmod(s1, s1, q)
            s1 := mulmod(mulmod(t, t, q), s1, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 4 - PARTIAL
            s0 := add(s0, C8)
            s1 := add(s1, C9)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 5 - PARTIAL
            s0 := add(s0, C10)
            s1 := add(s1, C11)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 6 - PARTIAL
            s0 := add(s0, C12)
            s1 := add(s1, C13)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 7 - PARTIAL
            s0 := add(s0, C14)
            s1 := add(s1, C15)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 8 - PARTIAL
            s0 := add(s0, C16)
            s1 := add(s1, C17)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 9 - PARTIAL
            s0 := add(s0, C18)
            s1 := add(s1, C19)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 10 - PARTIAL
            s0 := add(s0, C20)
            s1 := add(s1, C21)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 11 - PARTIAL
            s0 := add(s0, C22)
            s1 := add(s1, C23)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 12 - PARTIAL
            s0 := add(s0, C24)
            s1 := add(s1, C25)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 13 - PARTIAL
            s0 := add(s0, C26)
            s1 := add(s1, C27)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 14 - PARTIAL
            s0 := add(s0, C28)
            s1 := add(s1, C29)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 15 - PARTIAL
            s0 := add(s0, C30)
            s1 := add(s1, C31)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 16 - PARTIAL
            s0 := add(s0, C32)
            s1 := add(s1, C33)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 17 - PARTIAL
            s0 := add(s0, C34)
            s1 := add(s1, C35)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 18 - PARTIAL
            s0 := add(s0, C36)
            s1 := add(s1, C37)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 19 - PARTIAL
            s0 := add(s0, C38)
            s1 := add(s1, C39)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 20 - PARTIAL
            s0 := add(s0, C40)
            s1 := add(s1, C41)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 21 - PARTIAL
            s0 := add(s0, C42)
            s1 := add(s1, C43)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 22 - PARTIAL
            s0 := add(s0, C44)
            s1 := add(s1, C45)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 23 - PARTIAL
            s0 := add(s0, C46)
            s1 := add(s1, C47)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 24 - PARTIAL
            s0 := add(s0, C48)
            s1 := add(s1, C49)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 25 - PARTIAL
            s0 := add(s0, C50)
            s1 := add(s1, C51)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 26 - PARTIAL
            s0 := add(s0, C52)
            s1 := add(s1, C53)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 27 - PARTIAL
            s0 := add(s0, C54)
            s1 := add(s1, C55)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 28 - PARTIAL
            s0 := add(s0, C56)
            s1 := add(s1, C57)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 29 - PARTIAL
            s0 := add(s0, C58)
            s1 := add(s1, C59)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 30 - PARTIAL
            s0 := add(s0, C60)
            s1 := add(s1, C61)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 31 - PARTIAL
            s0 := add(s0, C62)
            s1 := add(s1, C63)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 32 - PARTIAL
            s0 := add(s0, C64)
            s1 := add(s1, C65)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 33 - PARTIAL
            s0 := add(s0, C66)
            s1 := add(s1, C67)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 34 - PARTIAL
            s0 := add(s0, C68)
            s1 := add(s1, C69)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 35 - PARTIAL
            s0 := add(s0, C70)
            s1 := add(s1, C71)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 36 - PARTIAL
            s0 := add(s0, C72)
            s1 := add(s1, C73)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 37 - PARTIAL
            s0 := add(s0, C74)
            s1 := add(s1, C75)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 38 - PARTIAL
            s0 := add(s0, C76)
            s1 := add(s1, C77)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 39 - PARTIAL
            s0 := add(s0, C78)
            s1 := add(s1, C79)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 40 - PARTIAL
            s0 := add(s0, C80)
            s1 := add(s1, C81)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 41 - PARTIAL
            s0 := add(s0, C82)
            s1 := add(s1, C83)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 42 - PARTIAL
            s0 := add(s0, C84)
            s1 := add(s1, C85)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 43 - PARTIAL
            s0 := add(s0, C86)
            s1 := add(s1, C87)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 44 - PARTIAL
            s0 := add(s0, C88)
            s1 := add(s1, C89)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 45 - PARTIAL
            s0 := add(s0, C90)
            s1 := add(s1, C91)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 46 - PARTIAL
            s0 := add(s0, C92)
            s1 := add(s1, C93)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 47 - PARTIAL
            s0 := add(s0, C94)
            s1 := add(s1, C95)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 48 - PARTIAL
            s0 := add(s0, C96)
            s1 := add(s1, C97)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 49 - PARTIAL
            s0 := add(s0, C98)
            s1 := add(s1, C99)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 50 - PARTIAL
            s0 := add(s0, C100)
            s1 := add(s1, C101)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 51 - PARTIAL
            s0 := add(s0, C102)
            s1 := add(s1, C103)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 52 - PARTIAL
            s0 := add(s0, C104)
            s1 := add(s1, C105)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 53 - PARTIAL
            s0 := add(s0, C106)
            s1 := add(s1, C107)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 54 - PARTIAL
            s0 := add(s0, C108)
            s1 := add(s1, C109)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 55 - PARTIAL
            s0 := add(s0, C110)
            s1 := add(s1, C111)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 56 - PARTIAL
            s0 := add(s0, C112)
            s1 := add(s1, C113)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 57 - PARTIAL
            s0 := add(s0, C114)
            s1 := add(s1, C115)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 58 - PARTIAL
            s0 := add(s0, C116)
            s1 := add(s1, C117)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 59 - PARTIAL
            s0 := add(s0, C118)
            s1 := add(s1, C119)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 60 - FULL
            s0 := add(s0, C120)
            s1 := add(s1, C121)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            t := mulmod(s1, s1, q)
            s1 := mulmod(mulmod(t, t, q), s1, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 61 - FULL
            s0 := add(s0, C122)
            s1 := add(s1, C123)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            t := mulmod(s1, s1, q)
            s1 := mulmod(mulmod(t, t, q), s1, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 62 - FULL
            s0 := add(s0, C124)
            s1 := add(s1, C125)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            t := mulmod(s1, s1, q)
            s1 := mulmod(mulmod(t, t, q), s1, q)
            // MIX
            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))
            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))
            s0 := t

            //ROUND 63 - FULL
            s0 := add(s0, C126)
            s1 := add(s1, C127)
            // SBOX
            t := mulmod(s0, s0, q)
            s0 := mulmod(mulmod(t, t, q), s0, q)
            t := mulmod(s1, s1, q)
            s1 := mulmod(mulmod(t, t, q), s1, q)
            // MIX
            s0 := mod(add(mulmod(s0, M00, q), mulmod(s1, M01, q)), q)

            result := s0
        }
    }

    function identity() external pure override returns (uint256) {
        return _identity();
    }

    // The hash of 0
    function _identity() internal pure returns (uint256) {
        return 0x2a09a9fd93c590c26b91effbb2499f07e8f7aa12e2b4940a3aed2411cb65e11c;
    }
}
